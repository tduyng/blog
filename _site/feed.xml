<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-02-22T16:31:43+01:00</updated><id>/feed.xml</id><title type="html">Adev42</title><subtitle>Learning is an endless journey</subtitle><entry><title type="html">Why use Docker compose</title><link href="/why-use-dockercompose" rel="alternate" type="text/html" title="Why use Docker compose" /><published>2020-11-24T01:00:00+01:00</published><updated>2020-11-24T01:00:00+01:00</updated><id>/why-use-dockercompose</id><content type="html" xml:base="/why-use-dockercompose"><![CDATA[<p>Demo using Docker compose with Nodejs</p>

<hr />

<h2 id="what-is-docker-compose">What is <strong>Docker compose</strong>?</h2>

<p>If you read this article, I think you maybe already understand what is <a href="https://www.docker.com/why-docker">Docker</a>.</p>

<p>Docker is a tool which helps to create, deploy, and run applications by using containers. Docker provides developers and operators with a friendly interface to build, ship, and run containers on any environment.</p>

<p>With the docker-cli, we can run and execute the Docker container via <a href="https://docs.docker.com/engine/reference/builder/#:~:text=A%20Dockerfile%20is%20a%20text,can%20use%20in%20a%20Dockerfile%20.">Dockerfile</a>. But with Dockerfile, we can work only with a container, but in the project, we normally work with multiple containers. In that case, we need to use <strong>Docker compose</strong>.</p>

<p><strong>Docker Compose</strong> define the services that make up your app in <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> so they can be run together in an isolated environment. It get an app running in one command by just running <code class="language-plaintext highlighter-rouge">docker-compose up</code>.</p>

<p><strong>Docker compose</strong> uses the <code class="language-plaintext highlighter-rouge">Dockerfile</code> if one add the build command to your project’s <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>. Your Docker workflow should be to build a suitable <code class="language-plaintext highlighter-rouge">Dockerfile</code> for each image you wish to create, then use compose to assemble the images using the build command.</p>

<p>We will create a demo: simple app nodejs using Redis. You will see the problem with only <strong>Dockerfile</strong> and why use <strong>Docker compose</strong>.</p>

<h2 id="project-demo">Project demo</h2>

<h3 id="installation">Installation</h3>

<p>Make sure you have docker &amp; docker-compose installed in your machine:</p>
<ul>
  <li><a href="https://docs.docker.com/get-docker/">How to install docker</a></li>
  <li><a href="https://docs.docker.com/compose/install/">How to install docker-compose</a></li>
</ul>

<h3 id="create-docker-images-without-docker-compose">Create Docker Images without Docker compose</h3>
<ul>
  <li>Create project folder
    <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">mkdir</span><span class="w"> </span><span class="n">node</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">demo</span><span class="w">
</span><span class="o">$</span><span class="w"> </span><span class="n">cd</span><span class="w"> </span><span class="n">node</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">demo</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Create <code class="language-plaintext highlighter-rouge">package.json</code> file</p>

    <p>In this file, we will declare the dependencies we use for our application. This step is similar as you create the Nodejs application (without <strong>npm install</strong> or <strong>yarn add</strong> dependencies).</p>

    <p>We consider our computer don’t have <strong>npm</strong> or <strong>yarn</strong> installed. We just use Docker to create the develop environment.</p>

    <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">touch</span><span class="w"> </span><span class="n">package.json</span><span class="w"> </span><span class="c1"># or yarn init -y</span><span class="w">
</span></code></pre></div>    </div>
    <p>Paste the following code:</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//package.json</span>
  <span class="p">{</span>
  <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node-redis-app</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1.0.0</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">main</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">index.js</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">license</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">MIT</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node index.js</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">dependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">redis</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//We don't care about the version of dependencies</span>
    <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//Docker will fetch the latest version of them</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Create <code class="language-plaintext highlighter-rouge">index.js</code> file to config <code class="language-plaintext highlighter-rouge">express</code> and run server
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//index.js</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">redis</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">();</span>
<span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">client</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">visits</span><span class="dl">'</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">client</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">visits</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">visits</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Number of visits is </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">visits</span><span class="p">);</span>
    <span class="nx">client</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">visits</span><span class="dl">'</span><span class="p">,</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">visits</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">App Redis is running on port 8080</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">const</span> 
</code></pre></div>    </div>
  </li>
  <li>Create <strong>Dockerfile</strong>
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Dockerfile</span>
<span class="s">FROM node:12.18-alpine</span> <span class="c1">#Version nodejs we want to use</span>

<span class="s">WORKDIR /app</span> <span class="c1">#Define the work directory of project in Docker container</span>

<span class="s">COPY package*.json ./</span> <span class="c1">#Make sure always copy package.json and package-lock.json to build folder</span>
<span class="c1"># Copy package.json to avoid reinstall all the dependencies for each build</span>

<span class="s">RUN yarn install</span> <span class="c1">#Run install and update dependencies from package.json</span>

<span class="s">COPY . .</span> <span class="c1">#Copy all other files to the build folder</span>

<span class="s">EXPOSE </span><span class="m">8080</span> <span class="c1">#Optional: Port running on Docker container</span>
<span class="s">CMD ["node", "index.js"]</span> <span class="c1">#Command line to run project</span>

</code></pre></div>    </div>
    <p>You can also check an article on my blog for more information of Dockerfile: <a href="https://blog.adev42.com/create-simple-project-nodejs-with-docker">Create simple project Nodejs with Docker</a></p>
  </li>
  <li>
    <p>Create <code class="language-plaintext highlighter-rouge">.dockerignore</code></p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">node_modules</span>
<span class="s">npm-debug.log</span>
<span class="s">yarn-debug.log</span>
</code></pre></div>    </div>
  </li>
  <li>Build Docker Image
OK, everything is done. Now, we will build this image:
    <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">build</span><span class="w"> </span><span class="o">-</span><span class="n">t</span><span class="w"> </span><span class="n">node</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">app</span><span class="w"> </span><span class="n">.</span><span class="w">
</span></code></pre></div>    </div>
    <p>Don’t forget the point <strong>.</strong> in the end.</p>

    <p>You can check all images available in your computer:</p>
    <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">images</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Run Docker container from Docker image
We have already an Docker image node-redis-app. The thing to do now is run container from this image to start project.</p>

    <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">run</span><span class="w"> </span><span class="o">-</span><span class="n">p</span><span class="w"> </span><span class="m">8080</span><span class="o">:</span><span class="m">8080</span><span class="w"> </span><span class="o">-</span><span class="n">it</span><span class="w"> </span><span class="n">node</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">app</span><span class="w">
</span></code></pre></div>    </div>
    <p><strong>-p 8080:8080</strong> flag: declare port using (port on Docker container and port on your machine)
<strong>-it</strong> flag: allow access inside the terminal of Docker container
<strong>node-redis-app</strong>: name image of your app</p>
  </li>
  <li>
    <p>Problem
When you run with the command above, you will see an error failed connection with Redis-server:</p>

    <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">run</span><span class="w"> </span><span class="o">-</span><span class="n">p</span><span class="w"> </span><span class="m">8080</span><span class="o">:</span><span class="m">8080</span><span class="w"> </span><span class="o">-</span><span class="n">it</span><span class="w"> </span><span class="n">node</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">app</span><span class="w">

</span><span class="n">App</span><span class="w"> </span><span class="n">Redis</span><span class="w"> </span><span class="n">is</span><span class="w"> </span><span class="n">running</span><span class="w"> </span><span class="n">on</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span><span class="n">Error</span><span class="o">:</span><span class="w"> </span><span class="n">Redis</span><span class="w"> </span><span class="n">connection</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="m">127.0.0.1</span><span class="o">:</span><span class="m">6379</span><span class="w"> </span><span class="n">failed</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">connect</span><span class="w"> </span><span class="n">ECONNREFUSED</span><span class="w"> </span><span class="m">127.0.0.1</span><span class="o">:</span><span class="m">6379</span><span class="w">
    </span><span class="n">at</span><span class="w"> </span><span class="n">TCPConnectWrap.afterConnect</span><span class="w"> </span><span class="p">[</span><span class="n">as</span><span class="w"> </span><span class="n">oncomplete</span><span class="p">]</span><span class="w"> </span><span class="p">(</span><span class="n">net.js</span><span class="o">:</span><span class="m">1141</span><span class="o">:</span><span class="m">16</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">errno</span><span class="o">:</span><span class="w"> </span><span class="s1">'ECONNREFUSED'</span><span class="p">,</span><span class="w">
  </span><span class="n">code</span><span class="o">:</span><span class="w"> </span><span class="s1">'ECONNREFUSED'</span><span class="p">,</span><span class="w">
  </span><span class="n">syscall</span><span class="o">:</span><span class="w"> </span><span class="s1">'connect'</span><span class="p">,</span><span class="w">
  </span><span class="n">address</span><span class="o">:</span><span class="w"> </span><span class="s1">'127.0.0.1'</span><span class="p">,</span><span class="w">
  </span><span class="n">port</span><span class="o">:</span><span class="w"> </span><span class="m">6379</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div>    </div>

    <p><strong>What is the problem ?</strong>
The problem is: You want to run 2 containers in same times.
==&gt; <strong>redis-server</strong> &amp;&amp; <strong>nodejs</strong>
But when you run your Dockerfile, you run only Nodejs app container, not to redis container.
You can also create other redis-server container from <a href="https://hub.docker.com/_/redis">redis</a> image</p>

    <p>There are no any link between 2 this containers. Your Nodejs application can’t connect to <strong>redis-server</strong>(from <strong>redis</strong> Docker image).</p>

    <p><strong>How to resolve this error?</strong>
The answer is <strong>Docker compose</strong>. In this case, we need to use Docker compose to run and connect multiple Docker container.</p>
  </li>
</ul>

<h3 id="create-docker-image-using-docker-compose">Create Docker image using Docker compose</h3>

<ul>
  <li>
    <p>To make sure the project above running, we need simply create a <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file.
It is a config file for docker-compose. It allows us to define the services (container) using in our app.</p>

    <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">touch</span><span class="w"> </span><span class="n">docker</span><span class="o">-</span><span class="n">compose.yml</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Add the following code:</p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span> <span class="c1">#version of docker-compose</span>
<span class="na">services</span><span class="pi">:</span> <span class="c1"># declare containers used</span>
  <span class="na">redis-server</span><span class="pi">:</span> <span class="c1">#image of redis</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s1">'</span><span class="s">redis'</span>
  <span class="na">node-app</span><span class="pi">:</span> <span class="c1">#images of your node app (using Dockerfile, package.json ...)</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span> <span class="c1">#If this container stops for any reason, always attempt to restart it</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">8080:8080'</span>

</code></pre></div>    </div>
    <p>Check <a href="https://docs.docker.com/compose/gettingstarted/">docker compose</a> for more details about configuration.</p>
  </li>
  <li>
    <p>Update redis services to <code class="language-plaintext highlighter-rouge">index.js</code> file</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.js</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">redis</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">process</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">process</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">({</span>
  <span class="na">host</span><span class="p">:</span> <span class="dl">'</span><span class="s1">redis-server</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">port</span><span class="p">:</span> <span class="dl">'</span><span class="s1">6379</span><span class="dl">'</span><span class="p">,</span>
<span class="p">});</span>
<span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">client</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">visits</span><span class="dl">'</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="nx">client</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">visits</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">visits</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Number of visits is </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">visits</span><span class="p">);</span>
    <span class="nx">client</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">visits</span><span class="dl">'</span><span class="p">,</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">visits</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">App Redis is running on port 8080</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

</code></pre></div>    </div>
  </li>
  <li>
    <p>Build and run your app with docker-compose</p>

    <p>In the root project:</p>
    <ul>
      <li>Build images:
        <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="o">-</span><span class="n">compose</span><span class="w"> </span><span class="n">build</span><span class="w">
</span></code></pre></div>        </div>
        <p>When you use docker-compose to build the image, the image name is always going to be **<project>_<service>**, where **<service>** in this example is **node-redis-app_node-app**.</service></service></project></p>
      </li>
      <li>Run containers with docker-compose
        <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="o">-</span><span class="n">compose</span><span class="w"> </span><span class="n">up</span><span class="w"> </span><span class="c1"># all services declared in docker-compose.yml will be started</span><span class="w">
</span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="o">-</span><span class="n">compose</span><span class="w"> </span><span class="n">up</span><span class="w"> </span><span class="o">-</span><span class="n">d</span><span class="w"> </span><span class="c1">#detach mode</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li>Stop containers with docker-compose
        <div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="o">-</span><span class="n">compose</span><span class="w"> </span><span class="n">down</span><span class="w"> </span><span class="c1"># Stop all containers declared in docker-compose.yml file</span><span class="w">
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p>That’s it. Test the code on your machine and check it in then <a href="http://localhost:8080">localhost8080</a> to see the result.</p>
<h2 id="resume">Resume</h2>

<p>Docker compose:</p>
<ul>
  <li>Separate CLI that gets installed along with Docker</li>
  <li>Used to startup multiple Docker containers at the same time</li>
  <li>Automate some of the long-winded arguments we were passing to <code class="language-plaintext highlighter-rouge">docker run</code></li>
  <li><strong>Docker compose</strong> will start and connect all the containers Docker that you declare in the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file. We will use it usually when we work with Docker.</li>
</ul>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://github.com/tienduy-nguyen/try-docker/tree/master/01.dive-into-docker/simple-with-redis">Code demo GitHub</a></li>
  <li><a href="https://blog.adev42.com/create-simple-project-nodejs-with-docker">Previous post: create simple Nodejs app with Docker</a></li>
  <li><a href="https://docs.docker.com/">Docker official</a></li>
  <li><a href="https://docs.docker.com/compose/">Learn about <strong>Docker compose</strong></a></li>
  <li><a href="https://jstobigdata.com/docker-compose-cheatsheet/">Docker compose cheatsheet</a></li>
</ul>]]></content><author><name>TienDuy</name></author><category term="docker" /><summary type="html"><![CDATA[Demo using Docker compose with Nodejs]]></summary></entry><entry><title type="html">Create simple web app Nodejs with Docker</title><link href="/create-simple-project-nodejs-with-docker" rel="alternate" type="text/html" title="Create simple web app Nodejs with Docker" /><published>2020-11-22T01:00:00+01:00</published><updated>2020-11-22T01:00:00+01:00</updated><id>/create-simple-project-nodejs-with-docker</id><content type="html" xml:base="/create-simple-project-nodejs-with-docker"><![CDATA[<p>How to get a Node.js application into a Docker container?</p>

<hr />

<h2 id="steps-to-create-a-web-application-nodejs-with-docker">Steps to create a web application Nodejs with Docker</h2>
<ul>
  <li>Create NodeJS web app</li>
  <li>Create a Dockerfile</li>
  <li>Build image from Dockerfile</li>
  <li>Run image as container</li>
  <li>Connect to web app from a browser</li>
</ul>

<h2 id="getting-started">Getting started</h2>

<h3 id="create-root-folder-of-project">Create root folder of project</h3>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">mkdir</span><span class="w"> </span><span class="n">simple</span><span class="o">-</span><span class="n">nodejs</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">cd</span><span class="w"> </span><span class="n">simple</span><span class="o">-</span><span class="n">nodejs</span><span class="w">
</span></code></pre></div></div>
<h3 id="init-packagejson">Init <code class="language-plaintext highlighter-rouge">package.json</code></h3>
<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">yarn</span><span class="w"> </span><span class="n">init</span><span class="w"> </span><span class="o">-</span><span class="n">y</span><span class="w">
</span></code></pre></div></div>

<p>Add dependencies and scripts in this <strong>package.json</strong> file</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"simple-nodejs"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MIT"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node index.js"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon index.js"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"nodemon"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"dotenv"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"mongoose"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"axios"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<h3 id="create-indexjs-file-in-root-project">Create <code class="language-plaintext highlighter-rouge">index.js</code> file (in root project)</h3>
<p>Add the following code to run server nodejs with <code class="language-plaintext highlighter-rouge">express</code> framework.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hi there!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running on port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">});</span>

</code></pre></div></div>
<h3 id="create-dockerfile">Create <code class="language-plaintext highlighter-rouge">Dockerfile</code></h3>
<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">touch</span><span class="w"> </span><span class="n">Dockerfile</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>
    <p>The first thing we need to do is define from what image we want to build from. Here is the version 12.18.1 of Nodejs from <a href="https://hub.docker.com/">DockerHub</a></p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">FROM node:12.18.1</span>
</code></pre></div>    </div>
  </li>
  <li>Next we create a directory to hold the application code inside the image. This will be the working directory for your application.
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create app directory</span>
<span class="s">WORKDIR /app</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>This image comes with Node.js and NPM already installed so the next thing we need to do is to install your app dependencies using the npm binary. Please note that if you are using npm version 4 or earlier a package-lock.json file will not be generated.</p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Install app dependencies</span>
<span class="c1"># A wildcard is used to ensure both package.json AND package-lock.json are copied</span>
<span class="c1"># where available (npm@5+)</span>
<span class="s">COPY package*.json ./</span>

<span class="s">RUN npm install</span>
<span class="c1"># If you are building your code for production</span>
<span class="c1"># RUN npm ci --only=production</span>
</code></pre></div>    </div>
  </li>
  <li>To bundle your app’s source code inside the Docker image, use the COPY instruction:
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bundle app source</span>
<span class="s">COPY . .</span>
</code></pre></div>    </div>
  </li>
  <li>Your app binds to port <code class="language-plaintext highlighter-rouge">8080</code> so you’ll use the <code class="language-plaintext highlighter-rouge">EXPOSE</code> instruction to have it mapped by the docker daemon:
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">EXPOSE </span><span class="m">8080</span>
</code></pre></div>    </div>
  </li>
  <li>Last but not least, define the command to run your app using CMD which defines your runtime. Here we will use <code class="language-plaintext highlighter-rouge">node index.js</code> to start your server as write in scripts of <code class="language-plaintext highlighter-rouge">package.json</code> file.
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">CMD ["yarn", "dev"]</span>
</code></pre></div>    </div>
  </li>
  <li>Your <code class="language-plaintext highlighter-rouge">Dockerfile</code> should now look like this:
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># Specify a base image</span>
  <span class="s">FROM node:12.18.1</span>

  <span class="s"># Create app directory</span>
  <span class="s">WORKDIR /app</span>

  <span class="s"># Install app dependencies</span>
  <span class="s"># A wildcard is used to ensure both package.json AND package-lock.json are copied</span>
  <span class="s"># where available (npm@5+)</span>
  <span class="s">COPY package*.json ./</span>

  <span class="s"># Install dependencies</span>
  <span class="s">RUN yarn install</span>
  <span class="s"># If you are building your code for production</span>
  <span class="s"># RUN npm ci --only=production</span>

  <span class="s"># Bundle app source</span>
  <span class="s">COPY . .</span>

  <span class="s">EXPOSE </span><span class="m">8080</span>

  <span class="c1"># Default command</span>
  <span class="s">CMD [ "yarn", "dev" ]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="create-dockerignore-file-with-the-following-content">Create <code class="language-plaintext highlighter-rouge">.dockerignore</code> file with the following content:</h3>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="s">node_modules</span>
  <span class="s">npm-debug.log</span>
</code></pre></div></div>
<h3 id="build-your-image">Build your image</h3>
<p>Go to the directory that has your <code class="language-plaintext highlighter-rouge">Dockerfile</code> and run the following command to build the Docker image. The <code class="language-plaintext highlighter-rouge">-t</code> flag lets you tag your image so it’s easier to find later using the <code class="language-plaintext highlighter-rouge">docker images</code> command:</p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">build</span><span class="w"> </span><span class="o">-</span><span class="n">t</span><span class="w"> </span><span class="o">&lt;</span><span class="n">your</span><span class="w"> </span><span class="n">username</span><span class="o">&gt;/</span><span class="n">node</span><span class="o">-</span><span class="n">docker</span><span class="w"> </span><span class="n">.</span><span class="w">
</span></code></pre></div></div>
<p>Your image will now be listed by Docker:</p>
<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">images</span><span class="w">

  </span><span class="c1"># Example</span><span class="w">
  </span><span class="n">REPOSITORY</span><span class="w">                      </span><span class="n">TAG</span><span class="w">        </span><span class="n">ID</span><span class="w">              </span><span class="n">CREATED</span><span class="w">
  </span><span class="n">node</span><span class="w">                            </span><span class="m">12</span><span class="w">         </span><span class="m">1934</span><span class="n">b0b038d1</span><span class="w">    </span><span class="m">5</span><span class="w"> </span><span class="n">days</span><span class="w"> </span><span class="n">ago</span><span class="w">
  </span><span class="o">&lt;</span><span class="n">your</span><span class="w"> </span><span class="n">username</span><span class="o">&gt;/</span><span class="n">node</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">app</span><span class="w">    </span><span class="n">latest</span><span class="w">     </span><span class="n">d64d3505b0d2</span><span class="w">    </span><span class="m">1</span><span class="w"> </span><span class="n">minute</span><span class="w"> </span><span class="n">ago</span><span class="w">
</span></code></pre></div></div>

<h3 id="run-the-image">Run the image</h3>
<p>Running your image with <code class="language-plaintext highlighter-rouge">-d</code> runs the container in detached mode, leaving the container running in the background. The <code class="language-plaintext highlighter-rouge">-p</code> flag redirects a public port to a private port inside the container. Run the image you previously built:</p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">run</span><span class="w"> </span><span class="o">-</span><span class="n">p</span><span class="w"> </span><span class="m">49160</span><span class="o">:</span><span class="m">8080</span><span class="w"> </span><span class="o">-</span><span class="n">d</span><span class="w"> </span><span class="o">&lt;</span><span class="n">your</span><span class="w"> </span><span class="n">username</span><span class="o">&gt;/</span><span class="n">node</span><span class="o">-</span><span class="n">docker</span><span class="w">
</span></code></pre></div></div>

<p>Print the output of your app:</p>
<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c1"># Get container ID</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">ps</span><span class="w">

  </span><span class="c1"># Print app output</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">logs</span><span class="w"> </span><span class="o">&lt;</span><span class="n">container</span><span class="w"> </span><span class="n">id</span><span class="o">&gt;</span><span class="w">

  </span><span class="c1"># Example</span><span class="w">
  </span><span class="n">Running</span><span class="w"> </span><span class="n">on</span><span class="w"> </span><span class="n">http</span><span class="o">://</span><span class="n">localhost</span><span class="o">:</span><span class="m">8080</span><span class="w">
</span></code></pre></div></div>

<p>If you need to go inside the container you can use the exec command:</p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c1"># Enter the container</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">exec</span><span class="w"> </span><span class="o">-</span><span class="n">it</span><span class="w"> </span><span class="o">&lt;</span><span class="n">container</span><span class="w"> </span><span class="n">id</span><span class="o">&gt;</span><span class="w"> </span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span><span class="w">
</span></code></pre></div></div>
<h3 id="test-your-docker-container">Test your Docker container</h3>
<p>To test your app, get the port of your app that Docker mapped:</p>
<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">ps</span><span class="w">

  </span><span class="c1"># Example</span><span class="w">
  </span><span class="n">ID</span><span class="w">            </span><span class="n">IMAGE</span><span class="w">                                </span><span class="n">COMMAND</span><span class="w">    </span><span class="n">...</span><span class="w">   </span><span class="n">PORTS</span><span class="w">
  </span><span class="n">ecce33b30ebf</span><span class="w">  </span><span class="o">&lt;</span><span class="n">your</span><span class="w"> </span><span class="n">username</span><span class="o">&gt;/</span><span class="n">node</span><span class="o">-</span><span class="n">docker</span><span class="o">:</span><span class="n">latest</span><span class="w">  </span><span class="n">npm</span><span class="w"> </span><span class="n">start</span><span class="w">  </span><span class="n">...</span><span class="w">   </span><span class="m">49160</span><span class="o">-&gt;</span><span class="m">8080</span><span class="w">
</span></code></pre></div></div>

<p>In the example above, Docker mapped the 8080 port inside of the container to the port 49160 on your machine.</p>

<p>Now you can call your app using curl (install if needed via: sudo apt-get install curl):</p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">curl</span><span class="w"> </span><span class="o">-</span><span class="n">i</span><span class="w"> </span><span class="n">localhost</span><span class="o">:</span><span class="m">49160</span><span class="w">

  </span><span class="n">HTTP</span><span class="o">/</span><span class="m">1.1</span><span class="w"> </span><span class="m">200</span><span class="w"> </span><span class="n">OK</span><span class="w">
  </span><span class="n">X</span><span class="o">-</span><span class="n">Powered</span><span class="o">-</span><span class="n">By</span><span class="o">:</span><span class="w"> </span><span class="n">Express</span><span class="w">
  </span><span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="o">:</span><span class="w"> </span><span class="n">text</span><span class="o">/</span><span class="n">html</span><span class="p">;</span><span class="w"> </span><span class="n">charset</span><span class="o">=</span><span class="n">utf</span><span class="m">-8</span><span class="w">
  </span><span class="n">Content</span><span class="o">-</span><span class="n">Length</span><span class="o">:</span><span class="w"> </span><span class="m">9</span><span class="w">
  </span><span class="n">ETag</span><span class="o">:</span><span class="w"> </span><span class="n">W</span><span class="o">/</span><span class="s2">"9-leKwfhJ1TlLDfP1IVUTU9ERZe/8"</span><span class="w">
  </span><span class="n">Date</span><span class="o">:</span><span class="w"> </span><span class="n">Mon</span><span class="p">,</span><span class="w"> </span><span class="m">23</span><span class="w"> </span><span class="n">Nov</span><span class="w"> </span><span class="m">2020</span><span class="w"> </span><span class="m">14</span><span class="o">:</span><span class="m">41</span><span class="o">:</span><span class="m">00</span><span class="w"> </span><span class="n">GMT</span><span class="w">
  </span><span class="n">Connection</span><span class="o">:</span><span class="w"> </span><span class="n">keep</span><span class="o">-</span><span class="n">alive</span><span class="w">

  </span><span class="n">Hi</span><span class="w"> </span><span class="n">there</span><span class="o">!</span><span class="w">
</span></code></pre></div></div>

<h2 id="some-useful-other-commands">Some useful other commands</h2>
<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">images</span><span class="w"> </span><span class="c1">#show all images installed</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">rmi</span><span class="w"> </span><span class="o">-</span><span class="n">f</span><span class="w"> </span><span class="o">&lt;</span><span class="n">image</span><span class="w"> </span><span class="n">id</span><span class="o">&gt;</span><span class="w"> </span><span class="c1">#remove image by id</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">ps</span><span class="w"> </span><span class="c1">#list all containers running</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">ps</span><span class="w"> </span><span class="o">-</span><span class="n">aq</span><span class="w"> </span><span class="c1">#list all containers (only ids)</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">stop</span><span class="w"> </span><span class="o">&lt;</span><span class="n">container</span><span class="w"> </span><span class="n">id</span><span class="o">&gt;</span><span class="w"> </span><span class="c1">#stop a container</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">stop</span><span class="w"> </span><span class="o">$</span><span class="p">(</span><span class="n">docker</span><span class="w"> </span><span class="n">ps</span><span class="w"> </span><span class="o">-</span><span class="n">aq</span><span class="p">)</span><span class="w"> </span><span class="c1">#stop all running container</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">rm</span><span class="w"> </span><span class="o">$</span><span class="p">(</span><span class="n">docker</span><span class="w"> </span><span class="n">ps</span><span class="w"> </span><span class="o">-</span><span class="n">aq</span><span class="p">)</span><span class="w"> </span><span class="c1">#remove all containers</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">rmi</span><span class="w"> </span><span class="o">$</span><span class="p">(</span><span class="n">docker</span><span class="w"> </span><span class="n">images</span><span class="w"> </span><span class="o">-</span><span class="n">q</span><span class="p">)</span><span class="w"> </span><span class="c1">#remove all images</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">system</span><span class="w"> </span><span class="n">prune</span><span class="w"> </span><span class="c1">#remove all stopped containers, all dangling images, all networks, all dangling build cache</span><span class="w">
  </span><span class="o">$</span><span class="w"> </span><span class="n">docker</span><span class="w"> </span><span class="n">system</span><span class="w"> </span><span class="n">prune</span><span class="w"> </span><span class="o">-</span><span class="n">a</span><span class="w"> </span><span class="c1"># remove all stopped container, all images, all networks, all build caches</span><span class="w">

</span></code></pre></div></div>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://github.com/tienduy-nguyen/try-docker/tree/master/01.dive-into-docker/simple-nodejs">Code GitHub example</a></li>
  <li><a href="https://hub.docker.com/_/node/">Official Nodejs Docker image</a></li>
  <li><a href="https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md">Nodejs Docker best practice guide</a></li>
  <li><a href="https://docs.docker.com/">Official Docker documentation</a></li>
  <li><a href="https://nodejs.org/en/docs/guides/nodejs-docker-webapp/">Doc guides NodeJS-Docker</a></li>
  <li><a href="https://docs.docker.com/get-started/nodejs/build-images/">Doc guides Docker-NodeJS</a></li>
</ul>]]></content><author><name>TienDuy</name></author><category term="docker" /><summary type="html"><![CDATA[How to get a Node.js application into a Docker container?]]></summary></entry><entry><title type="html">Config ESLint, Prettier for React App in VSCode</title><link href="/config-esling-prettier-react-app" rel="alternate" type="text/html" title="Config ESLint, Prettier for React App in VSCode" /><published>2020-11-17T01:00:00+01:00</published><updated>2020-11-17T01:00:00+01:00</updated><id>/config-esling-prettier-react-app</id><content type="html" xml:base="/config-esling-prettier-react-app"><![CDATA[<p>As a developer, you will understand how important of quality of code in your project. ESlint and Prettier are great tools helps you for formatting and style of code.</p>

<hr />

<p>In this article, you will understand how to setup ESLint &amp; Prettier in your React project and on text-editor VSCode.</p>

<h2 id="what-are-eslint-and-prettier">What are ESLint and Prettier?</h2>

<h3 id="eslint">ESlint</h3>

<p>It is a static code analyzer, that means it tells you errors and mistakes that you may make while you are developing.</p>

<p>These errors can be stuff like -</p>

<p>Simple syntax errors eg. not closing a function declaration with }.
Dead code detection eg. unused variables, code written after a return statement.
Violating code guidelines, these are rules defined by yourself or a combination of predefined standards like the Airbnb styled guide or Google’s style guide etc.</p>

<h3 id="prettier">Prettier</h3>
<p>Prettier is a code formatter, it’s only concerned with how your code looks, do you want ensure consistent indentation in the entire project?
Do you want to ensure there’re no semicolons in the project? Make your promise chains look perfectly consistent and readable? Prettier can be enabled for the entire project and instead of your team disagreeing about formatting styles, you can just leave it all to Prettier to figure out.</p>

<h2 id="why-vscode">Why VSCode?</h2>

<ul>
  <li>Visual Studio Code (VSCode) is a very popular coding editor used by millions of developers around the world.</li>
  <li>VSCode is a source code editor while Visual Studio is a complete IDE.</li>
  <li>Visual Studio Code is a cross-platform which works on Windows, Linux and macOS whereas Visual Studio only works on Windows and macOS.</li>
  <li>VSCode is fast and lightweight, and Visual Studio 2015 is not as fast but consists of a multitude of features. It is very easy to use.</li>
  <li>It support  myriads of programming languages. It supports Python, JavaScript, HTML, CSS, TypeScript, C++, Java, PHP, Go, C#, PHP, SQL, Ruby, Objective-C and much more.</li>
  <li>Built-in Git integration</li>
  <li>IntelliSense: It is a feature which is used by programmers for smart code completion, parameter info, content assist, quick info and the code hinting. VSC provides IntelliSense for JavaScript, CSS, HTML, TypeScript, JSON, Sass and Less programming languages. For other languages, we can use IntelliSense by adding its extensions.</li>
</ul>

<p>VSCode has much more other advantages. If you don’t use this text-editor yet. I think you should take a look, I’m pretty sure that you will fall in love quickly with it.</p>

<h2 id="setup-vscode">Setup VSCode</h2>

<h3 id="install-extensions">Install extensions</h3>

<p>To use ESLint &amp; Prettier tool, first of all, you need to install these extensions:</p>
<ul>
  <li><strong>ESLint</strong>: ESLint for editor</li>
  <li><strong>Prettier</strong>: Format code</li>
  <li><strong>vscode-styled-components</strong>: Highlight &amp; auto-complete for styled-component</li>
  <li><strong>Auto Rename Tag</strong>: Auto rename tag when code HTML, JSX</li>
  <li><strong>Auto Close Tag</strong>: As its name, it allows auto close tag when code HTML, JSX, TSX… Auto Close Tag and Auto Rename Tag are a great duo.</li>
  <li><strong>Editor Config for VSCode</strong>: Allow to run <code class="language-plaintext highlighter-rouge">.editorconfig</code> file.</li>
</ul>

<h3 id="setup-workspace-setting-in-vscode">Setup Workspace Setting in VSCode</h3>

<p>So  when all extensions already, we will take some configurations for settings in VScode.</p>

<p>For anyone who don’t know, VSCode has 2 settings, one is for <strong>user</strong>, the orther for <strong>workspace</strong>. If you don’t setup for <strong>workspace</strong>, by default VSCode will get settings directly at the <strong>user settings</strong></p>

<ul>
  <li><strong>user settings</strong>: <code class="language-plaintext highlighter-rouge">settings.json</code> file of VSCode</li>
  <li><strong>workspace settings</strong>: Create a folder and file <code class="language-plaintext highlighter-rouge">.vscode/settings.json</code> in the root of your project.</li>
</ul>

<p>In this article, I just explain how to setup for the <strong>workspace</strong>. You do the same for settings of user.</p>

<p>Now, start setting up.</p>

<ul>
  <li>Create file <code class="language-plaintext highlighter-rouge">.vscode/settings.json</code> in the root of your project
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.codeActionsOnSave"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"source.fixAll.eslint"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>

    <p>It means:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">editor.defaultFormatter</code>: take <strong>Prettier</strong> as default formater</li>
      <li><code class="language-plaintext highlighter-rouge">editor.formatOnSave: true</code>: format automatically the code when saving files</li>
      <li><code class="language-plaintext highlighter-rouge">eslint.format.enable: true</code>: enable formatting code of ESlint</li>
      <li><code class="language-plaintext highlighter-rouge">source.fixAll.eslint: true</code>: fix auto code with ESLint. Sometime we need to fix manually.</li>
    </ul>
  </li>
  <li>Add <code class="language-plaintext highlighter-rouge">.vscode/extensions.json</code> file and paste the following code. It will recommend use install the following extension when open this project on their VScode.
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"recommendations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"mikael.angular-beastcode"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"angular.ng-template"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"coenraads.bracket-pair-colorizer"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"mikestead.dotenv"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"dsznajder.es7-react-js-snippets"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"dbaeumer.vscode-eslint"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"mkxml.vscode-filesize"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"ritwickdey.liveserver"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"davidanson.vscode-markdownlint"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"pkief.material-icon-theme"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"zhuangtongfa.material-theme"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"esbenp.prettier-vscode"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"syler.sass-indented"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"octref.vetur"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"ms-vscode.vscode-typescript-tslint-plugin"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"visualstudioexptteam.vscodeintellicode"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"formulahendry.code-runner"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>

    <p>It’s very helpful when we work in  team. We just share the folder <code class="language-plaintext highlighter-rouge">.vscode</code> and <code class="language-plaintext highlighter-rouge">json</code> file each other. But in that case, don’t add <strong>.vscode</strong> in <strong>.gitignore</strong> file.</p>
  </li>
  <li>
    <p>Add file <code class="language-plaintext highlighter-rouge">.editorconfig</code> in the root project</p>

    <p>If you don’t know, <strong>.editorconfig</strong> was created to unify standards between different editors.</p>

    <p>For example: user would use <strong>indent</strong> as <strong>space</strong>, some peoples would use <strong>tag</strong>. Some users want to <strong>2</strong> for indent, the others want to <strong>4</strong>. So <strong>.editorconfig</strong> helps our code to be consistent, easy to read and maintain.</p>

    <p>Because we already have the <strong>Editor Config</strong> extension, installed above, when we created this file, the VSCode will automatically take these settings.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[*]
end_of_line = lf
indent_style = space
indent_size = 2
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="setup-eslint-and-prettier-for-react">Setup ESLint and Prettier for React</h2>

<h3 id="why-configuration-for-react-app-">Why configuration for React App ?</h3>

<p>The setup in this article isn’t only for React app, but also we can setup similarly for other framework as Angular, Vue or any front-end project. React is just a framework that I have familiar with for this moment.</p>

<h3 id="setup">Setup</h3>

<p>Here, I use <a href="https://github.com/facebook/create-react-app">create-react-app</a>, so by default they have the basic ESLint installed, I just need to install a few more dependencies.</p>

<ul>
  <li>Create <code class="language-plaintext highlighter-rouge">.env</code> in the root folder of project and add  the value <code class="language-plaintext highlighter-rouge">EXTEND_ESLINT=true</code>. It allows us to add more others linter to <strong>React</strong>.</li>
  <li>Install more packages
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn add <span class="nt">-D</span> prettier eslint-config-prettier eslint-plugin-prettier
</code></pre></div>    </div>
  </li>
  <li>Add <strong>script</strong> to run them in <code class="language-plaintext highlighter-rouge">package.json</code> file
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts start"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts build"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts test"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"eject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts eject"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eslint --ext js,jsx,ts,tsx src/"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lint:fix"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eslint --fix --ext js,jsx,ts,tsx src/"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"prettier"</span><span class="p">:</span><span class="w"> </span><span class="s2">"prettier --check </span><span class="se">\"</span><span class="s2">src/**/(*.tsx|*.ts|*.jsx|*.js|*.scss|*.css)</span><span class="se">\"</span><span class="s2">"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"prettier:fix"</span><span class="p">:</span><span class="w"> </span><span class="s2">"prettier --write </span><span class="se">\"</span><span class="s2">src/**/(*.tsx|*.ts|*.jsx|*.js|*.scss|*.css)</span><span class="se">\"</span><span class="s2">"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
    <p>So we can use <code class="language-plaintext highlighter-rouge">yarn lint</code>, <code class="language-plaintext highlighter-rouge">yarn lint:fix</code> … to check or fix code style with these tools.</p>
  </li>
  <li>
    <p>Create <code class="language-plaintext highlighter-rouge">.prettierrc</code></p>

    <p>It contains the rules for <strong>Prettier</strong></p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "arrowParens": "avoid",
  "semi": false,
  "trailingComma": "none",
  "endOfLine": "lf",
  "tabWidth": 2,
  "printWidth": 80,
  "useTabs": false
}
</code></pre></div>    </div>
  </li>
  <li>Create <code class="language-plaintext highlighter-rouge">.prettierignore</code>
<strong>Prettier</strong> will ignore and will not check these files.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.cache
package-lock.json
</code></pre></div>    </div>
  </li>
  <li>
    <p>Create <code class="language-plaintext highlighter-rouge">.eslintrc</code></p>

    <p>This file intend to expand the ESLint React configuration. It helps to catch erros on the terminal. If you have installed the ESLint extension ESlint, it will rely on this file to catch errors directly on the editor.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "extends": ["react-app", "prettier"],
  "plugins": ["react", "prettier"],
  "rules": {
    "prettier/prettier": [
      "warn",
      {
        "arrowParens": "avoid",
        "semi": false,
        "trailingComma": "none",
        "endOfLine": "lf",
        "tabWidth": 2,
        "printWidth": 80,
        "useTabs": false
      }
    ],
    "no-console": "warn"
  }
}
</code></pre></div>    </div>
    <p>We have added some <strong>prettier</strong> rules like we added in <code class="language-plaintext highlighter-rouge">.prettierrc</code> to ESlint. So that ESlint will catch errors in case we format to format code.</p>
  </li>
  <li>
    <p>Create <code class="language-plaintext highlighter-rouge">.eslintignore</code>
Ignore files that we don’t want to catch errors.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/src/serviceWorker.js
/src/setupTests.js/js
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>So that’s it. Hope you learned something new. Eslint is endlessly customizable and you should explore more to find some plugins and configs that best benefit your project.</p>

<p>All the code snippets can be found here on <a href="https://github.com/tienduy-nguyen/webpack-react-typescript-template">my GitHub</a></p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://github.com/tienduy-nguyen/webpack-react-typescript-template">Code GitHub</a></li>
  <li><a href="https://dev.to/onygami/eslint-and-prettier-for-react-apps-bonus-next-js-and-typescript-3e46">Setup eslint prettier from scratch on dev.to</a></li>
  <li><a href="https://xdevclass.com/cai-dat-moi-truong-code-react-toi-uu-vs-code-prettier-eslint/">Other Ref</a></li>
</ul>]]></content><author><name>TienDuy</name></author><category term="Web Development" /><summary type="html"><![CDATA[As a developer, you will understand how important of quality of code in your project. ESlint and Prettier are great tools helps you for formatting and style of code.]]></summary></entry><entry><title type="html">Setup Webpack React TypeScript</title><link href="/setup-webpack-react-typescript" rel="alternate" type="text/html" title="Setup Webpack React TypeScript" /><published>2020-11-15T11:00:00+01:00</published><updated>2020-11-15T11:00:00+01:00</updated><id>/setup-webpack-react-typescript</id><content type="html" xml:base="/setup-webpack-react-typescript"><![CDATA[<p>How to setup a React project with Webpack and TypeScript?</p>

<hr />

<p>With <a href="https://github.com/facebook/create-react-app">create-react-app</a>, it only takes a few clicks to create a complete React project, requires not in-depth knowledge of webpack or babel. But if you are still not satisfied with the features that <code class="language-plaintext highlighter-rouge">create-react-app</code> brings. For example, CSS does not show source-map when dev, or may be you simply configure more deeply. If in this case, It’s the time to configure manually <code class="language-plaintext highlighter-rouge">webpack</code>.</p>

<p>If you do not have any knowledge about webpack, you can refer my two previous articles:</p>
<ul>
  <li><a href="https://blog.adev42.com/basic-setup-webpack">Setup basic webpack</a></li>
  <li><a href="https://blog.adev42.com/setup-webpack-with-typescript">Webpack &amp; TypeScript</a></li>
</ul>

<h2 id="init-project">Init project</h2>
<ul>
  <li>Install dependencies packages
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn init <span class="nt">-y</span>
<span class="nv">$ </span>yarn add <span class="nt">-D</span> react react-dom redux react-redux react-router-dom typescript
<span class="nv">$ </span>yarn add <span class="nt">-D</span> webpack webpack-cli webpack-dev-server style-loader css-loader sass sass-loader typescript ts-loader
</code></pre></div>    </div>
  </li>
  <li>Install plugin for webpack
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn add <span class="nt">-D</span> clean-webpack-plugin compression-webpack-plugin copy-webpack-plugin dotenv-webpack html-webpack-plugin mini-css-extract-plugin webpack-bundle-analyzer
</code></pre></div>    </div>

    <ul>
      <li><strong>clean-webpack-plugin</strong>: A webpack plugin to remove/clean your build folder(s). Check <a href="https://github.com/johnagan/clean-webpack-plugin">clean-webpack-plugin</a></li>
      <li><strong>compression-webpack-plugin</strong>: Compress asset file (css, js, html …) to <strong>gzip</strong> Check more <a href="https://webpack.js.org/plugins/compression-webpack-plugin/">compression-webpack-plugin</a></li>
      <li><strong>copy-webpack-plugin</strong>: Copies individual files or entire directories, which already exist, to the build directory. For example: you have files such as favicon.ico, robots.txt at the same level as index.html, when the build is complete, these files will also be present in the build. If you do not have this plugin, you have to copy them manually. Check <a href="https://webpack.js.org/plugins/copy-webpack-plugin/">copy-webpack-plugin</a>.</li>
      <li><strong>dotenv-webpack</strong>: Using <code class="language-plaintext highlighter-rouge">.env</code> file in your app. Check <a href="https://github.com/mrsteele/dotenv-webpack">dotenv-webpack</a></li>
      <li><strong>html-webpack-plugin</strong>: Clone <code class="language-plaintext highlighter-rouge">public/index.html</code> file to build folder. Check how it works in my previous post <a href="https://blog.adev42.com/setup-webpack-with-typescript">Webpack &amp; Typescript</a></li>
      <li><strong>mini-css-extract-plugin</strong>: Normally, the <code class="language-plaintext highlighter-rouge">css</code> will be in the js file after build. When running the app, <code class="language-plaintext highlighter-rouge">js</code> will add that <code class="language-plaintext highlighter-rouge">css</code> to <style></style> tag. Now, if we want the <code class="language-plaintext highlighter-rouge">css</code> to be in a separate file with <code class="language-plaintext highlighter-rouge">js</code> and when app running, <code class="language-plaintext highlighter-rouge">js</code> will automatically import it with the <link />&lt;/link&gt; tag. That is the function of this plugin.<br />
Check more information for <a href="https://webpack.js.org/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a></li>
      <li><strong>webpack-bundle-analyzer</strong>: It will create an interactive treemap visualization of the contents of all your bundles. Check <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a></li>
    </ul>
  </li>
  <li>Install <code class="language-plaintext highlighter-rouge">ESLint</code> &amp; <code class="language-plaintext highlighter-rouge">Prettier</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn add <span class="nt">-D</span> eslint eslint-config-react-app eslint-loader eslint-plugin-flowtype eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks @typescript-eslint/eslint-plugin @typescript-eslint/parser prettier eslint-plugin-prettier eslint-config-prettier
</code></pre></div>    </div>
    <p>Except <code class="language-plaintext highlighter-rouge">prettier</code>, <code class="language-plaintext highlighter-rouge">eslint-config-prettier</code> and <code class="language-plaintext highlighter-rouge">eslint-plugin-prettier</code> the rest are plugins used by <code class="language-plaintext highlighter-rouge">create-react-app</code>.</p>

    <p><strong>Create file configuration:</strong>:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">.eslintrc</code>
        <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"extends"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"react-app"</span><span class="p">,</span><span class="w"> </span><span class="s2">"prettier"</span><span class="p">],</span><span class="w">
</span><span class="nl">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"react"</span><span class="p">,</span><span class="w"> </span><span class="s2">"prettier"</span><span class="p">],</span><span class="w">
</span><span class="nl">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"prettier/prettier"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"warn"</span><span class="p">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"arrowParens"</span><span class="p">:</span><span class="w"> </span><span class="s2">"avoid"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"semi"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"trailingComma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"none"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"endOfLine"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lf"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"tabWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
      </span><span class="nl">"printWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"useTabs"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"no-console"</span><span class="p">:</span><span class="w"> </span><span class="s2">"warn"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">.eslintignore</code>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/src/serviceWorker.ts
/src/setupTests.ts
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">.prettierrc</code>
        <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"arrowParens"</span><span class="p">:</span><span class="w"> </span><span class="s2">"avoid"</span><span class="p">,</span><span class="w">
</span><span class="nl">"semi"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
</span><span class="nl">"trailingComma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"none"</span><span class="p">,</span><span class="w">
</span><span class="nl">"endOfLine"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lf"</span><span class="p">,</span><span class="w">
</span><span class="nl">"tabWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
</span><span class="nl">"printWidth"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
</span><span class="nl">"useTabs"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">prettierignore</code>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.cache
package-lock.json
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Add scripts to <code class="language-plaintext highlighter-rouge">package.json</code>
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"webpack serve --mode development"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"webpack --mode production"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"build:analyze"</span><span class="p">:</span><span class="w"> </span><span class="s2">"webpack --mode production --env analyze"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eslint --ext js,jsx,ts,tsx src/"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lint:fix"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eslint --fix --ext js,jsx,ts,tsx src/"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"prettier"</span><span class="p">:</span><span class="w"> </span><span class="s2">"prettier --check </span><span class="se">\"</span><span class="s2">src/**/(*.tsx|*.ts|*.jsx|*.js|*.scss|*.css)</span><span class="se">\"</span><span class="s2">"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"prettier:fix"</span><span class="p">:</span><span class="w"> </span><span class="s2">"prettier --write </span><span class="se">\"</span><span class="s2">src/**/(*.tsx|*.ts|*.jsx|*.js|*.scss|*.css)</span><span class="se">\"</span><span class="s2">"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<h2 id="configuration">Configuration</h2>
<h3 id="config-tsconfigjson">Config <code class="language-plaintext highlighter-rouge">tsconfig.json</code></h3>
<ul>
  <li>
    <p>Code
I will use TypeScript for this template, so I need a config file for TypeScript to compile JavaScript. If you want to use JavaScript, that will be very similar, you just need install <code class="language-plaintext highlighter-rouge">babel</code> and these loader. Check my <a href="https://blog.adev42.com/basic-setup-webpack">previous article</a> for the details.</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ES5"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"allowJs"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ESNext"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"."</span><span class="p">,</span><span class="w">
    </span><span class="nl">"paths"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"@/*"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"src/*"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"@@/*"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./*"</span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"src/**/*"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="config-webpackconfigjs">Config <code class="language-plaintext highlighter-rouge">webpack.config.js</code></h3>
<ul>
  <li>Code
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">path</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">webpack</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">html-webpack-plugin</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">CopyPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">copy-webpack-plugin</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">Dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv-webpack</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">MiniCssExtractPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mini-css-extract-plugin</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">CleanWebpackPlugin</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">clean-webpack-plugin</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">CompressionPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">compression-webpack-plugin</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">BundleAnalyzerPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">webpack-bundle-analyzer</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">BundleAnalyzerPlugin</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="nx">agrv</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isDev</span> <span class="o">=</span> <span class="nx">agrv</span><span class="p">.</span><span class="nx">mode</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">development</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">isAnalyze</span> <span class="o">=</span> <span class="nx">env</span> <span class="o">&amp;&amp;</span> <span class="nx">env</span><span class="p">.</span><span class="nx">analyze</span>
  <span class="kd">const</span> <span class="nx">basePlugins</span> <span class="o">=</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">Dotenv</span><span class="p">(),</span>
    <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
      <span class="na">template</span><span class="p">:</span> <span class="dl">"</span><span class="s2">public/index.html</span><span class="dl">"</span>
    <span class="p">}),</span>
    <span class="k">new</span> <span class="nx">CopyPlugin</span><span class="p">({</span>
      <span class="na">patterns</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="na">from</span><span class="p">:</span> <span class="dl">"</span><span class="s2">**/*</span><span class="dl">"</span><span class="p">,</span>
          <span class="na">globOptions</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">ignore</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">index.html</span><span class="dl">"</span><span class="p">]</span>
          <span class="p">},</span>
          <span class="na">to</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
          <span class="na">context</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">public</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">}),</span>
    <span class="k">new</span> <span class="nx">MiniCssExtractPlugin</span><span class="p">({</span>
      <span class="na">filename</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">[name].css</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">static/css/[name].[contenthash:6].css</span><span class="dl">"</span>
    <span class="p">}),</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProgressPlugin</span><span class="p">()</span>
  <span class="p">]</span>
  <span class="kd">let</span> <span class="nx">prodPlugins</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">...</span><span class="nx">basePlugins</span><span class="p">,</span>
    <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">(),</span>
    <span class="k">new</span> <span class="nx">CompressionPlugin</span><span class="p">({</span>
      <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">css|js|html|svg</span><span class="se">)</span><span class="sr">$/</span>
    <span class="p">})</span>
  <span class="p">]</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isAnalyze</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">prodPlugins</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">prodPlugins</span><span class="p">,</span> <span class="k">new</span> <span class="nx">BundleAnalyzerPlugin</span><span class="p">()]</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./src/index.tsx</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">ts|tsx</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">ts-loader</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">eslint-loader</span><span class="dl">"</span><span class="p">],</span>
          <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">s</span><span class="se">[</span><span class="sr">ac</span><span class="se">]</span><span class="sr">ss|css</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
            <span class="nx">MiniCssExtractPlugin</span><span class="p">.</span><span class="nx">loader</span><span class="p">,</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">css-loader</span><span class="dl">"</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span> <span class="na">sourceMap</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
            <span class="p">},</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sass-loader</span><span class="dl">"</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span> <span class="na">sourceMap</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">eot|ttf|woff|woff2</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">file-loader</span><span class="dl">"</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">name</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">[path][name].[ext]</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">static/fonts/[name].[ext]</span><span class="dl">"</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|svg|jpg|gif</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">file-loader</span><span class="dl">"</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">name</span><span class="p">:</span> <span class="nx">isDev</span>
                  <span class="p">?</span> <span class="dl">"</span><span class="s2">[path][name].[ext]</span><span class="dl">"</span>
                  <span class="p">:</span> <span class="dl">"</span><span class="s2">static/media/[name].[contenthash:6].[ext]</span><span class="dl">"</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">]</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">.tsx</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">.ts</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">.jsx</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">.js</span><span class="dl">"</span><span class="p">],</span>
      <span class="na">alias</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">@</span><span class="dl">"</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">),</span>
        <span class="dl">"</span><span class="s2">@@</span><span class="dl">"</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">build</span><span class="dl">"</span><span class="p">),</span>
      <span class="na">publicPath</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">filename</span><span class="p">:</span> <span class="dl">"</span><span class="s2">static/js/main.[contenthash:6].js</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">environment</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">arrowFunction</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">bigIntLiteral</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">const</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">destructuring</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">dynamicImport</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">forOf</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">module</span><span class="p">:</span> <span class="kc">false</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="na">devtool</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">source-map</span><span class="dl">"</span> <span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">contentBase</span><span class="p">:</span> <span class="dl">"</span><span class="s2">public</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
      <span class="na">hot</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">watchContentBase</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">historyApiFallback</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="nx">basePlugins</span> <span class="p">:</span> <span class="nx">prodPlugins</span><span class="p">,</span>
    <span class="na">performance</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">maxEntrypointSize</span><span class="p">:</span> <span class="mi">800000</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Explanation</p>

    <p>I have explain the details of many definition in the <code class="language-plaintext highlighter-rouge">webpack.config.js</code> file in my two previous article <a href="https://blog.adev42.com/basic-setup-webpack">setup webpack basic</a> &amp; <a href="https://blog.adev42.com/setup-webpack-with-typescript">setup webpack typescript</a>. In this article, I just explain the new definitions..</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">isDev</code>: We have 2 modes: <strong>development</strong> and <strong>production</strong> equivalent to dev and build. These two modes are passed through the <code class="language-plaintext highlighter-rouge">--mode</code> in the script in <code class="language-plaintext highlighter-rouge">package.json</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">isAnalyze</code>: To define use <code class="language-plaintext highlighter-rouge">BundleAnalyzerPlugin</code> or not</li>
      <li><code class="language-plaintext highlighter-rouge">basePlugins</code>: plugins use in dev mode</li>
      <li><code class="language-plaintext highlighter-rouge">CopyPlugin</code>: copy all files in <strong>public</strong> folder to <strong>build</strong> folder, except <code class="language-plaintext highlighter-rouge">index.html</code>. Because we have already plugin <code class="language-plaintext highlighter-rouge">HtmlWebpackPlugin</code> do it.</li>
      <li><code class="language-plaintext highlighter-rouge">webpack.ProgressPlugin()</code> show by percentage of progress when run webpack</li>
      <li><code class="language-plaintext highlighter-rouge">CompressionPlugin()</code>: compress build files to <strong>gzip</strong></li>
      <li><code class="language-plaintext highlighter-rouge">prodPlugins</code>: plugins used in mode production.</li>
      <li><code class="language-plaintext highlighter-rouge">plugins</code>: Contains plugins of webpack</li>
      <li><code class="language-plaintext highlighter-rouge">performance.maxEntrypointSize</code>: When a build file exceeds this limit (in bytes), it will be warned on the terminal.</li>
    </ul>
  </li>
</ul>

<h2 id="demo-code">Demo code</h2>

<ul>
  <li>Create <code class="language-plaintext highlighter-rouge">public/index.html</code>
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>

<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>Webpack<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">'root'</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Webpack React TypeScript<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div>    </div>
    <p>All others codes are created as a template of Webpack React TS project. Check <a href="https://github.com/tienduy-nguyen/webpack/tree/master/webpack-react-typescript">code GitHub</a> for more details.</p>
  </li>
  <li>Run and build project
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn start <span class="c"># Run dev enviroment</span>
<span class="nv">$ </span>yarn build <span class="c"># Build</span>
<span class="nv">$ </span>yarn build:analyze <span class="c"># Build and analyze project</span>
  
</code></pre></div>    </div>
    <p>We can use <code class="language-plaintext highlighter-rouge">yarn lint</code>, <code class="language-plaintext highlighter-rouge">yarn lint:fix</code>, <code class="language-plaintext highlighter-rouge">yarn prettier</code> and <code class="language-plaintext highlighter-rouge">yarn prettier:fix</code> to run the command check and fix syntax code with eslint or prettier.</p>
  </li>
</ul>

<h2 id="structure-folder">Structure folder</h2>

<pre><code class="language-tree">.
├── package.json
├── public
│   ├── favicon.ico
│   ├── index.html
│   ├── logo192.png
│   ├── logo512.png
│   ├── manifest.json
│   └── robots.txt
├── README.md
├── src
│   ├── apis
│   │   ├── product.api.ts
│   │   └── user.api.ts
│   ├── App
│   │   ├── App.actions.ts
│   │   ├── App.constants.ts
│   │   ├── App.reducer.ts
│   │   └── App.tsx
│   ├── assets
│   │   ├── fonts
│   │   │   ├── OpenSans-BoldItalic.ttf
│   │   │   ├── OpenSans-Bold.ttf
│   │   │   ├── OpenSans-ExtraBoldItalic.ttf
│   │   │   ├── OpenSans-ExtraBold.ttf
│   │   │   ├── OpenSans-Italic.ttf
│   │   │   ├── OpenSans-LightItalic.ttf
│   │   │   ├── OpenSans-Light.ttf
│   │   │   ├── OpenSans-Regular.ttf
│   │   │   ├── OpenSans-SemiBoldItalic.ttf
│   │   │   └── OpenSans-SemiBold.ttf
│   │   ├── images
│   │   │   ├── home.svg
│   │   │   ├── list.svg
│   │   │   └── open-menu.svg
│   │   └── scss
│   │       └── index.scss
│   ├── components
│   │   ├── Header
│   │   │   ├── Header.styles.ts
│   │   │   └── Header.tsx
│   │   ├── Loading
│   │   │   └── Loading.tsx
│   │   └── SideNav
│   │       ├── SideNav.styles.ts
│   │       └── SideNav.tsx
│   ├── constants
│   │   ├── paths.ts
│   │   └── styles.ts
│   ├── guards
│   │   └── AuthenticatedGuard.tsx
│   ├── helpers
│   │   └── string.ts
│   ├── hooks
│   │   └── usePrevious.tsx
│   ├── index.tsx
│   ├── layouts
│   │   └── MainLayout.tsx
│   ├── logo.svg
│   ├── pages
│   │   ├── Home
│   │   │   └── Home.tsx
│   │   ├── Login
│   │   │   ├── Login.actions.ts
│   │   │   ├── Login.constants.ts
│   │   │   ├── Login.reducer.ts
│   │   │   ├── Login.styles.ts
│   │   │   ├── Login.thunks.ts
│   │   │   └── Login.tsx
│   │   └── Product
│   │       ├── ProductItem
│   │       │   ├── ProductItem.actions.ts
│   │       │   ├── ProductItem.constants.ts
│   │       │   ├── ProductItem.reducer.ts
│   │       │   ├── ProductItem.thunks.ts
│   │       │   └── ProductItem.tsx
│   │       └── ProductList
│   │           ├── ProductList.actions.ts
│   │           ├── ProductList.constants.ts
│   │           ├── ProductList.reducer.ts
│   │           ├── ProductList.styles.ts
│   │           ├── ProductList.thunks.ts
│   │           └── ProductList.tsx
│   ├── react-app-env.d.ts
│   ├── reducer
│   │   └── reducer.ts
│   ├── routes
│   │   ├── HomeRoutes.tsx
│   │   ├── LoginRoutes.tsx
│   │   ├── ProductRoutes.tsx
│   │   └── routes.tsx
│   ├── serviceWorker.ts
│   ├── setupTests.ts
│   ├── store
│   │   └── store.ts
│   └── @types
│       ├── action.d.ts
│       ├── api.d.ts
│       ├── files.d.ts
│       ├── product.d.ts
│       ├── reducer.d.ts
│       └── user.d.ts
├── tsconfig.json
├── webpack.config.js
└── yarn.lock
</code></pre>
<hr />
<p>Stay tunned to keep update my next articles and understand how I use the structures project like that.</p>
<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://github.com/tienduy-nguyen/webpack/tree/master/webpack-react-typescript">Gihub code demo</a></li>
  <li><a href="https://xdevclass.com/webpack-sieu-toc-3-cau-hinh-react-typescript-eslint-prettier-hoan-chinh-tu-a-z/">Ref</a></li>
</ul>]]></content><author><name>TienDuy</name></author><category term="Web Development" /><summary type="html"><![CDATA[How to setup a React project with Webpack and TypeScript?]]></summary></entry><entry><title type="html">Setup Webpack TypeScript</title><link href="/setup-webpack-with-typescript" rel="alternate" type="text/html" title="Setup Webpack TypeScript" /><published>2020-11-14T11:00:00+01:00</published><updated>2020-11-14T11:00:00+01:00</updated><id>/setup-webpack-with-typescript</id><content type="html" xml:base="/setup-webpack-with-typescript"><![CDATA[<p>How to setup a webpack project with TypeScript?</p>

<p>We continue from the previous article <a href="https://blog.adev42.com/basic-setup-webpack">basic setup webpack</a>. In this article, we will discover how to setup a webpack project with TypeScript and using plugin in Webpack.</p>

<ul>
  <li><a href="#install-webpack-and-loaders-packages">Install webpack and loaders packages</a></li>
  <li><a href="#create-project-files">Create project files</a></li>
  <li><a href="#configuration">Configuration</a>
    <ul>
      <li><a href="#tsconfigjson"><code class="language-plaintext highlighter-rouge">tsconfig.json</code></a>
        <ul>
          <li><a href="#code">Code</a></li>
          <li><a href="#explanation">Explanation</a></li>
        </ul>
      </li>
      <li><a href="#webpackconfigjs"><code class="language-plaintext highlighter-rouge">webpack.config.js</code></a>
        <ul>
          <li><a href="#code-1">Code</a></li>
          <li><a href="#explanation-1">Explanation</a></li>
        </ul>
      </li>
      <li><a href="#structure-of-project">Structure of project</a></li>
    </ul>
  </li>
  <li><a href="#reference">Reference</a></li>
</ul>

<h2 id="install-webpack-and-loaders-packages">Install webpack and loaders packages</h2>

<ul>
  <li>Create new project and install packages dependencies
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>webpack-typescript
<span class="nv">$ </span><span class="nb">cd </span>webpack-typescript
<span class="nv">$ </span>npm init <span class="nt">-y</span>
<span class="nv">$ </span>yarn add webpack webpack-cli webpack-dev-server style-loader css-loader sass sass-loader file-loader <span class="nt">-D</span>
</code></pre></div>    </div>

    <p>To understand each dependencies means, checkout my previous article <a href="https://blog.adev42.com/basic-setup-webpack">basic setup webpack</a></p>
  </li>
  <li>
    <p>Install HTMLWebpackPlugin</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn add html-webpack-plugin <span class="nt">-D</span>
</code></pre></div>    </div>

    <p>This plugin will help use import automatically the new <code class="language-plaintext highlighter-rouge">bundle.js</code> file after build into <code class="language-plaintext highlighter-rouge">index.html</code> build file. You will see more explanation below.</p>
  </li>
  <li>
    <p>Install TypeScript
<a href="https://www.typescriptlang.org/">TypeScript</a> extends JavaScript by adding types. By understanding JavaScript, TypeScript saves you time catching errors, debug adn providing fixes before you run code. Any browser, any OS, anywhere JavaScript runs.</p>

    <p>We can use TypeScript to compile to the compatible JavaScript version, so we don’t need use <code class="language-plaintext highlighter-rouge">babel</code> in this case.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn add typescript ts-loader <span class="nt">-D</span>
</code></pre></div>    </div>
    <ul>
      <li><strong>typescript</strong>: install TypeScript language for your project. You can also install TypeScript on your machine as <code class="language-plaintext highlighter-rouge">Nodejs</code>, <code class="language-plaintext highlighter-rouge">Python</code> and the other programming languages with command: <code class="language-plaintext highlighter-rouge">yarn add global typescript</code>.</li>
      <li><strong>ts-loader</strong>: allow integrate TypeScript to webpack</li>
    </ul>
  </li>
</ul>

<h2 id="create-project-files">Create project files</h2>

<p>We will create a simple project to understand each config for webpack project using TypeScript. This project will be the same the <a href="https://github.com/tienduy-nguyen/webpack/tree/master/webpack-basic">previous project</a>. But we will code in TypeScript.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">public/index.html</code> file</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
  <span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Webpack<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span>Webpack with TypeScript<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>    </div>
    <p>Notice: you can see, we don’t import any <code class="language-plaintext highlighter-rouge">js</code> file. The reason is <code class="language-plaintext highlighter-rouge">HtmlWebpackPlugin</code>, will be explained below.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">src/add.ts</code>
    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">):</span> <span class="kr">number</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">treeShaking</span> <span class="o">=</span> <span class="p">():</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">This phrase will not appear on build file</span><span class="dl">'</span><span class="p">);</span>
<span class="p">};</span>

</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">src/app.d.ts</code></p>

    <p>Why this file? TypeScript is a strong type, it will not consider files as images, videos as modules, and we can’t import them. So we need declare the type for each file type.</p>

    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">declare</span> <span class="kr">module</span>  <span class="dl">'</span><span class="s1">*.png</span><span class="dl">'</span><span class="p">{</span>
  <span class="kd">const</span> <span class="nx">src</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">export</span> <span class="k">default</span> <span class="nx">src</span>
<span class="p">}</span>
<span class="kr">declare</span> <span class="kr">module</span>  <span class="dl">'</span><span class="s1">*.jpg</span><span class="dl">'</span><span class="p">{</span>
  <span class="kd">const</span> <span class="nx">src</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">export</span> <span class="k">default</span> <span class="nx">src</span>
<span class="p">}</span>
<span class="kr">declare</span> <span class="kr">module</span>  <span class="dl">'</span><span class="s1">*.jpeg</span><span class="dl">'</span><span class="p">{</span>
  <span class="kd">const</span> <span class="nx">src</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">export</span> <span class="k">default</span> <span class="nx">src</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">src/index.scss</code>
    <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$color</span><span class="p">:</span> <span class="mh">#ddd</span><span class="p">;</span>
<span class="nn">#root</span> <span class="p">{</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$color</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">src/loadImage.ts</code>
    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./logo.png</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">component</span> <span class="o">=</span> <span class="p">():</span> <span class="nx">HTMLElement</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">element</span><span class="p">:</span> <span class="nx">HTMLDivElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="na">webpackLogo</span><span class="p">:</span> <span class="nx">HTMLImageElement</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">();</span>
  <span class="nx">webpackLogo</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">logo</span><span class="p">;</span>
  <span class="nx">webpackLogo</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">webpackLogo</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">element</span><span class="p">;</span>
<span class="p">};</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">)?.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">component</span><span class="p">());</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">src/subtract.ts</code>
    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">subtract</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">src/index.ts</code>
    <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">subtract</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./subtract</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">add</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./add</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./loadImage</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./index.scss</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`1 + 2 = </span><span class="p">${</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`8 - 2 = </span><span class="p">${</span><span class="nx">subtract</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>

</code></pre></div>    </div>
    <h2 id="configuration">Configuration</h2>
    <h3 id="tsconfigjson"><code class="language-plaintext highlighter-rouge">tsconfig.json</code></h3>
  </li>
</ul>

<p>This file contains de configuration to compile the TypeScript code to Js code.</p>

<p>Create compileOption for TypeScript: <code class="language-plaintext highlighter-rouge">tsc --init</code> or create directly <code class="language-plaintext highlighter-rouge">tsconfig.json</code> in the root folder and paste the following code.</p>
<h4 id="code">Code</h4>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ES6"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"allowJs"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ESNext"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./dist/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"paths"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"@/*"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"src/*"</span><span class="p">],</span><span class="w">
        </span><span class="nl">"@@/*"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./*"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"src/**/*"</span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>For more information about <a href="https://www.typescriptlang.org/tsconfig">tsconfig</a></p>

<h4 id="explanation">Explanation</h4>

<p>How <code class="language-plaintext highlighter-rouge">tsconfig.json</code> file works?</p>

<ul>
  <li><strong>target</strong>: Version javascript that we want to build from TypeScript. Here is <code class="language-plaintext highlighter-rouge">ES6</code></li>
  <li><strong>allowJs</strong>: Allow use using <code class="language-plaintext highlighter-rouge">js</code> file in TypeScript project</li>
  <li><strong>strict</strong>: <code class="language-plaintext highlighter-rouge">Strict mode</code> for Typescript</li>
  <li><strong>module</strong>: After compiling the js, the codes will be written as ESNext module. There are many option here, but we do not recommend use the option <code class="language-plaintext highlighter-rouge">commonJS</code> because il will lose the <a href="https://webpack.js.org/guides/tree-shaking/">Tree-shaking</a> feature of webpack. See this feature in <a href="https://blog.adev42.com/basic-setup-webpack#tree-shaking-in-webpack">my previous post</a></li>
  <li><strong>noImplicitAny</strong>: Do not allow any implicit understanding</li>
  <li><strong>sourceMap</strong>: easier to debug in dev enviroment. We need use it in both <code class="language-plaintext highlighter-rouge">tsconfig</code> and <code class="language-plaintext highlighter-rouge">webpack.config</code></li>
  <li><strong>baseUrl</strong>: The base path, usually “./”. If you use the <code class="language-plaintext highlighter-rouge">path</code> option below, you must specify baseUrl</li>
  <li><strong>paths</strong>: Create alias to facilitate import. For example, instead of using <code class="language-plaintext highlighter-rouge">../../../</code> now you can shorten it to <code class="language-plaintext highlighter-rouge">@/</code>. Configuring the alias in <code class="language-plaintext highlighter-rouge">tsconfig.json</code> just helps the editor to understand it, it doesn’t work with webpack. So you have to configure with alias with the webpack below as well.</li>
  <li><strong>include</strong>: Specifies the files to be used in the project.</li>
</ul>

<h3 id="webpackconfigjs"><code class="language-plaintext highlighter-rouge">webpack.config.js</code></h3>
<h4 id="code-1">Code</h4>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">html-webpack-plugin</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="nx">agrv</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isDev</span> <span class="o">=</span> <span class="nx">agrv</span><span class="p">.</span><span class="nx">mode</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/index.ts</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">ts|tsx</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ts-loader</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">s</span><span class="se">[</span><span class="sr">ac</span><span class="se">]</span><span class="sr">ss|css</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
            <span class="dl">'</span><span class="s1">style-loader</span><span class="dl">'</span><span class="p">,</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">css-loader</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span> <span class="na">sourceMap</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
            <span class="p">},</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sass-loader</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span> <span class="na">sourceMap</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|svg|jpg|gif</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">file-loader</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[path][name].[ext]</span><span class="dl">'</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">]</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.ts</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.tsx</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.jsx</span><span class="dl">'</span><span class="p">],</span>
      <span class="na">alias</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">@</span><span class="dl">'</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">src</span><span class="dl">'</span><span class="p">),</span>
        <span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">dist</span><span class="dl">'</span><span class="p">),</span>
      <span class="na">publicPath</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
      <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bundle.[hash:6].js</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">environment</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">arrowFunction</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">bigIntLiteral</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">const</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">destructuring</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">dynamicImport</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">forOf</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">module</span><span class="p">:</span> <span class="kc">false</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="na">devtool</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">source-map</span><span class="dl">'</span> <span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">contentBase</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
      <span class="na">hot</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">watchContentBase</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
      <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
        <span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public/index.html</span><span class="dl">'</span>
      <span class="p">})</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="explanation-1">Explanation</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Entry</code>: Entry points of your project where you put the main code to run your server. Check <a href="https://webpack.js.org/concepts/entry-points/">Webpack entry point</a></li>
  <li><code class="language-plaintext highlighter-rouge">module.rules</code>: Array contains the <code class="language-plaintext highlighter-rouge">loaders</code></li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">test</code>: Using <strong>regex</strong> to determine the file type. If it is <code class="language-plaintext highlighter-rouge">true</code> then it will run the loader.</p>

    <p><code class="language-plaintext highlighter-rouge">file-loader</code> will run png, svg, jpg, gif… (image and video) file.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">exclude</code>: Enter a <strong>regex</strong>, the <code class="language-plaintext highlighter-rouge">loader</code> will ignore these file and folder.</li>
  <li><code class="language-plaintext highlighter-rouge">use</code>: Retrieve an object or an array containing loader information.
    <ul>
      <li>Notice for <code class="language-plaintext highlighter-rouge">babel-loader</code>: using presets <code class="language-plaintext highlighter-rouge">@babel/preset</code> by default. It will compile to ES5 syntax.</li>
      <li>Notice for <code class="language-plaintext highlighter-rouge">style-loader</code>: using <strong>sourMap</strong> to easier debug when dev.</li>
      <li>Notice for <code class="language-plaintext highlighter-rouge">file-loader</code>: using <code class="language-plaintext highlighter-rouge">[path][name].[ext]</code> means after build, the files will be created with the similar names in similar folder. For example: if you have <code class="language-plaintext highlighter-rouge">src/logo.png</code> file, when you build it, you will have <code class="language-plaintext highlighter-rouge">dist/src/logo.png</code>.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">resolve: { extensions: [‘.js’, ‘.jsx’] }</code>: The priority order when import files. For example, there are 2 files name.js and name.jsx in the same folder. In another file you import * from ‘name’, it will prioritize .js file</li>
  <li><code class="language-plaintext highlighter-rouge">alias</code>: Create alias to facilitate import in webpack</li>
  <li><code class="language-plaintext highlighter-rouge">output</code>: configuration of build file webpack
    <ul>
      <li><code class="language-plaintext highlighter-rouge">output.path</code>: the absolute path to the directory after build. For the absolute path, we usually use <code class="language-plaintext highlighter-rouge">path.resolve()</code> or <code class="language-plaintext highlighter-rouge">path.join()</code> in combination with the global variable <code class="language-plaintext highlighter-rouge">__dirname</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">output.publicPath</code>: the relative path from the <code class="language-plaintext highlighter-rouge">index.html</code> file pointing to the files in the <strong>dist</strong> directory after build.</li>
    </ul>

    <p>For example: in the file <code class="language-plaintext highlighter-rouge">loadImage.js</code>, we import logo, the logo variable will be become: <code class="language-plaintext highlighter-rouge">output.publicPath + 'src/logo.png</code>. If after the build, we run the <code class="language-plaintext highlighter-rouge">index.html</code> file in a different location not in <strong>the public directory</strong>, we will accidentally make the logo variable wrong.</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">output.filename</code>: filename of js bundle after build.</li>
    </ul>

    <p>Here we use <code class="language-plaintext highlighter-rouge">[hash:6]</code> means the bundle will add 6 random characters to the bundle file in each build (ex: <code class="language-plaintext highlighter-rouge">bundle.bbc536.js</code>).</p>

    <p>This is aimed at restricting your browser to cache Javascript when you update a new Javascript version for your website.</p>

    <p>But we have a problem. Each time of build, we will have a new bundle file. So do we need edit the src of script import in the <code class="language-plaintext highlighter-rouge">public/index.html</code> file?</p>

    <p>We don’t. Because we use the plugin <code class="language-plaintext highlighter-rouge">HtmlWebpackPlugin</code>. It will help use create a new <code class="language-plaintext highlighter-rouge">index.html</code> file from the original html file.</p>

    <p>This new <code class="language-plaintext highlighter-rouge">html</code> file will use the template as the <code class="language-plaintext highlighter-rouge">public/index.html</code> and automatically build to <code class="language-plaintext highlighter-rouge">dist/src/index.html</code> and import new <code class="language-plaintext highlighter-rouge">bundle.....js</code> file.</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">output.environment</code>: By default, webpack will generate code using the ES6 syntax. If you don’t want this, you can modify the target build by yourself in the <code class="language-plaintext highlighter-rouge">output.environment</code>
        <ul>
          <li><strong>arrowFunction</strong>: support arrow function.</li>
          <li><strong>bigIntLiteral</strong>: support BigInt</li>
          <li><strong>const</strong>: support declaration <code class="language-plaintext highlighter-rouge">const</code> và <code class="language-plaintext highlighter-rouge">let</code></li>
          <li><strong>destructuring</strong>: support destructuring</li>
          <li><strong>dynamicImport</strong>: support async import</li>
          <li><strong>forOf</strong>: support <code class="language-plaintext highlighter-rouge">forOf</code> for array</li>
          <li><strong>module</strong>: support moudle ES6 (import … from ‘…’)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">devtool</code>: contains the configuration file after dev or after build. When you in the dev step, you can use <code class="language-plaintext highlighter-rouge">source-map</code> to debug more simply. But we don’t use it in the production to reduce the volume of file when build.</p>

    <p>Check <a href="https://webpack.js.org/configuration/devtool/">Devtool Webpack</a></p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">devServer</code>: You can imagine, it will create a server <strong>localhost</strong> at the root folder
    <ul>
      <li><strong>devServer.contentBase</strong>: the path directory where contains <code class="language-plaintext highlighter-rouge">index.html</code> file. Here is <code class="language-plaintext highlighter-rouge">public</code></li>
      <li><strong>devServer.port</strong>: port of localhost</li>
      <li><strong>devServer.hot</strong>: The mode <code class="language-plaintext highlighter-rouge">hot reload</code>. By default, on the dev server, webpack will refresh the page every time when there is a slight change in the code. The <code class="language-plaintext highlighter-rouge">hot reload</code> helps use to see the change but don’t need reload page.</li>
      <li><strong>devServer.publicPath</strong>: the relative path from root directory pointing to the build directory. Here is <code class="language-plaintext highlighter-rouge">/dist/</code> –&gt; / is root folder</li>
      <li><strong>devServer.watchContentBase</strong>: If you have the change in the <code class="language-plaintext highlighter-rouge">index.html</code>, browser will reload automatically.</li>
    </ul>
  </li>
</ul>

<h3 id="structure-of-project">Structure of project</h3>
<pre><code class="language-tree">.
├── dist
│   ├── bundle.bbc536.js
│   ├── index.html
│   └── src
│       └── logo.png
├── package.json
├── public
│   └── index.html
├── README.md
├── src
│   ├── add.ts
│   ├── app.d.ts
│   ├── index.scss
│   ├── index.ts
│   ├── loadImage.ts
│   ├── logo.png
│   └── subtract.ts
├── tsconfig.json
├── webpack.config.js
└── yarn.lock
</code></pre>
<hr />

<h2 id="reference">Reference</h2>
<ul>
  <li>
    <p><a href="https://github.com/tienduy-nguyen/webpack/tree/master/webpack-typescript">Source code GitHub</a></p>
  </li>
  <li>
    <p><a href="https://blog.adev42.com/basic-setup-webpack">Previous post - basic setup webpack</a></p>
  </li>
  <li>
    <p><a href="https://xdevclass.com/webpack-sieu-toc-2-cau-hinh-typescript-alias-hash-bundle/">Ref</a></p>
  </li>
</ul>]]></content><author><name>TienDuy</name></author><category term="Web Development" /><summary type="html"><![CDATA[How to setup a webpack project with TypeScript?]]></summary></entry><entry><title type="html">Basic Setup Webpack</title><link href="/basic-setup-webpack" rel="alternate" type="text/html" title="Basic Setup Webpack" /><published>2020-11-13T11:00:00+01:00</published><updated>2020-11-13T11:00:00+01:00</updated><id>/basic-setup-webpack</id><content type="html" xml:base="/basic-setup-webpack"><![CDATA[<p>Webpack fundamentals for fast learning and step by step to setup a project with webpack.</p>

<ul>
  <li><a href="#webpack">Webpack</a>
    <ul>
      <li><a href="#webpack-basics">Webpack basics</a>
        <ul>
          <li><a href="#setup-a-webpack-project">Setup a webpack project</a></li>
          <li><a href="#setup-babel">Setup Babel</a></li>
          <li><a href="#install-style-loader--file-loader">Install Style-loader &amp; File loader</a></li>
        </ul>
      </li>
      <li><a href="#setup-webpack">Setup Webpack</a>
        <ul>
          <li><a href="#demo-code">Demo code</a></li>
          <li><a href="#explanation">Explanation</a>
            <ul>
              <li><a href="#configuration-in-webpackconfigjs-file">Configuration in <code class="language-plaintext highlighter-rouge">webpack.config.js</code> file</a></li>
              <li><a href="#tree-shaking-in-webpack">Tree Shaking in Webpack</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#reference">Reference</a></li>
</ul>

<h2 id="webpack-basics">Webpack basics</h2>

<p><code class="language-plaintext highlighter-rouge">Webpack</code> is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging …</p>

<p>Check more information on <a href="https://webpack.js.org/">Webpack website</a></p>

<h3 id="setup-a-webpack-project">Setup a webpack project</h3>
<ul>
  <li>Create project and init <code class="language-plaintext highlighter-rouge">package.json</code> file
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>webpack-basic
<span class="nv">$ </span><span class="nb">cd </span>webpack-basic
<span class="nv">$ </span>npm init <span class="nt">-y</span>
</code></pre></div>    </div>
  </li>
  <li>In the root project create <code class="language-plaintext highlighter-rouge">public</code> folder and <code class="language-plaintext highlighter-rouge">index.html file</code>
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
  <span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span>Webpack basic<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"../dist/bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div>    </div>
    <h3 id="setup-babel">Setup Babel</h3>
  </li>
</ul>

<p>Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments.</p>

<p>See the website <a href="https://babeljs.io/">babeljs.io</a> for more information.</p>

<ul>
  <li>Installation
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn add @babel/core @babel/preset-env babel-loader
<span class="c"># Or using npm</span>
<span class="nv">$ </span>npm i <span class="nt">-D</span> @babel/core @babel/preset-env babel-loader
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">@babel/core</code>: Core of babel contains algorithms of its</li>
      <li><code class="language-plaintext highlighter-rouge">@babel/preset-env</code>: is a smart preset that allows you to use the latest JavaScript without needing to micromanage which syntax transforms (and optionally, browser polyfills) are needed by your target environment(s). This both makes your life easier and JavaScript bundles smaller!. Check official website of <a href="https://babeljs.io/docs/en/babel-preset-env#:~:text=%40babel%2Fpreset%2Denv%20is,Install">@babel/preset-env</a> for more details.</li>
      <li><code class="language-plaintext highlighter-rouge">babel-loader</code>: This package allows transpiling JavaScript files using Babel and webpack. Check <a href="https://github.com/babel/babel-loader">babel-loader github</a>.</li>
    </ul>
  </li>
</ul>

<h3 id="install-style-loader--file-loader">Install Style-loader &amp; File loader</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn add css-loader file-loader sass sass-loader style-loader <span class="nt">-D</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">style-loader</code>, <code class="language-plaintext highlighter-rouge">css-loader</code>: help you to import <code class="language-plaintext highlighter-rouge">css</code> into <code class="language-plaintext highlighter-rouge">js</code> file</li>
  <li><code class="language-plaintext highlighter-rouge">sass</code>, <code class="language-plaintext highlighter-rouge">sass-loader</code> help you compile <code class="language-plaintext highlighter-rouge">scss</code> to <code class="language-plaintext highlighter-rouge">css</code></li>
  <li><code class="language-plaintext highlighter-rouge">file-loader</code>: help you import file as <code class="language-plaintext highlighter-rouge">image</code>, <code class="language-plaintext highlighter-rouge">video</code> to <code class="language-plaintext highlighter-rouge">js</code> file</li>
</ul>

<h2 id="setup-webpack">Setup Webpack</h2>
<ul>
  <li>Installation
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>webpack webpack-cli webpack-dev-server <span class="nt">-D</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">webpack</code>: core of webpack</li>
      <li><code class="language-plaintext highlighter-rouge">webpack-cli</code>: allow us to use command of webpack on the terminal</li>
      <li><code class="language-plaintext highlighter-rouge">webpack-dev-server</code>: can be use to create a <code class="language-plaintext highlighter-rouge">local server</code> for dev environment</li>
    </ul>
  </li>
  <li>
    <p>Configuration</p>

    <p>Create <code class="language-plaintext highlighter-rouge">webpack.config.js</code> file in the root project and paste the following code.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="nx">agrv</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isDev</span> <span class="o">=</span> <span class="nx">agrv</span><span class="p">.</span><span class="nx">mode</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/index.js</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">js|jsx</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">exclude</span><span class="p">:</span> <span class="sr">/</span><span class="se">(</span><span class="sr">node_modules|bower_components</span><span class="se">)</span><span class="sr">/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">babel-loader</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">presets</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">@babel/preset-env</span><span class="dl">'</span><span class="p">]</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">s</span><span class="se">[</span><span class="sr">ac</span><span class="se">]</span><span class="sr">ss|css</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
            <span class="dl">'</span><span class="s1">style-loader</span><span class="dl">'</span><span class="p">,</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">css-loader</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span> <span class="na">sourceMap</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
            <span class="p">},</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sass-loader</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span> <span class="na">sourceMap</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|svg|jpg|gif</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
              <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">file-loader</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[path][name].[ext]</span><span class="dl">'</span>
              <span class="p">}</span>
            <span class="p">}</span>
          <span class="p">]</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span> <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.jsx</span><span class="dl">'</span><span class="p">]</span> <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">dist</span><span class="dl">'</span><span class="p">),</span>
      <span class="na">publicPath</span><span class="p">:</span> <span class="dl">'</span><span class="s1">../dist/</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bundle.js</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">environment</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">arrowFunction</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">bigIntLiteral</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">const</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">destructuring</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">dynamicImport</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">forOf</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">module</span><span class="p">:</span> <span class="kc">false</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="na">devtool</span><span class="p">:</span> <span class="nx">isDev</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">source-map</span><span class="dl">'</span> <span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">contentBase</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
      <span class="na">hot</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">publicPath</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/dist/</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">watchContentBase</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Script to run server
Edit script in <code class="language-plaintext highlighter-rouge">package.json</code> file to run and build server.</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"webpack serve --mode development"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"webpack --mode production"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
    <h3 id="demo-code">Demo code</h3>
    <p>To understand better how webpack works, we will create some simple demo code</p>
  </li>
  <li>Create <code class="language-plaintext highlighter-rouge">src</code> folder in the root of project and a <code class="language-plaintext highlighter-rouge">src/add.js</code> file
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//src/add.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">treeShaking</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span><span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">This phrase will be not in the build file</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Create more functions
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/substract.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">substract</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">;</span>

</code></pre></div>    </div>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/loadImage.js</span>
<span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./logo.png</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">component</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span><span class="p">{</span>
  <span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">webpackLogo</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">();</span>
  <span class="nx">webpackLogo</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">logo</span><span class="p">;</span>
  <span class="nx">webpackLogo</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">webpackLogo</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">element</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">component</span><span class="p">())</span>
</code></pre></div>    </div>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/index.js</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">substract</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./substract</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">add</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./add</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./loadImage</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">.index.scss</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`1 + 2 = </span><span class="p">${</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`8 - 2 = </span><span class="p">${</span><span class="nx">substract</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="s2">`)
</span></code></pre></div>    </div>
    <p>And we have a tree folder:</p>

    <pre><code class="language-tree"># webpack-basic project
.
├── node_modules
├── package.json
├── package-lock.json
├── public
│   └── index.html
├── src
│   ├── add.js
│   ├── index.js
│   ├── index.scss
│   ├── loadImage.js
│   ├── logo.png
│   └── substract.js
├── webpack.config.js
└── yarn.lock
</code></pre>
  </li>
  <li>Run server to see the result at <a href="http://localhost:3000">http://localhost:3000</a>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm run start
<span class="c"># or</span>
<span class="nv">$ </span>yarn start
</code></pre></div>    </div>

    <p>If you want to build webpack:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn build
</code></pre></div>    </div>
    <h3 id="explanation">Explanation</h3>
    <h4 id="configuration-in-webpackconfigjs-file">Configuration in <code class="language-plaintext highlighter-rouge">webpack.config.js</code> file</h4>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Definition</code>: This is the main configuration webpack file. Webpack configs allow you to configure and extend Webpack’s basic functionality. A Webpack config is a JavaScript object that configures one of Webpack’s options.</p>

    <p>When we run <code class="language-plaintext highlighter-rouge">webpack</code> command in the <code class="language-plaintext highlighter-rouge">package.json</code> file, webpack will be take automatically the configuration in this file.</p>

    <p>For more information of configuration of webpack <a href="https://webpack.js.org/configuration/">webpack configuration</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Exporting</code>: In the <code class="language-plaintext highlighter-rouge">config</code> file, we can export an <strong>object</strong>, a <strong>function</strong>, an <strong>array</strong> or a <strong>promise</strong>. In this article, we will see how to export a function, because it allows us to use the arguments passed from outside. Check <a href="https://webpack.js.org/configuration/configuration-types/">Webpack configuration type</a>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Mode</code>: We need to provide a <strong>mode</strong> configuration option when configure webpack. Each mode has its own a config settings. Check <a href="https://webpack.js.org/configuration/mode/">Webpack mode</a></p>

    <p>If you remember, we have used this mode to run 2 different cases for server in the <code class="language-plaintext highlighter-rouge">package.json</code> file, for the <strong>development</strong> and <strong>production</strong> mode.</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"webpack serve --mode development"</span><span class="err">,</span><span class="w">
</span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"webpack --mode production"</span><span class="w">
</span></code></pre></div>    </div>

    <p>And in the <code class="language-plaintext highlighter-rouge">webpack.config.js</code> we can define the mode by using <code class="language-plaintext highlighter-rouge">argv.mode</code></p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Entry</code>: Entry points of your project where you put the main code to run your server. Check <a href="https://webpack.js.org/concepts/entry-points/">Webpack entry point</a></li>
  <li><code class="language-plaintext highlighter-rouge">module.rules</code>: Array contains the <code class="language-plaintext highlighter-rouge">loaders</code></li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">test</code>: Using <strong>regex</strong> to determine the file type. If it is <code class="language-plaintext highlighter-rouge">true</code> then it will run the loader.</p>

    <p>The <code class="language-plaintext highlighter-rouge">babel-loader</code> will run the <code class="language-plaintext highlighter-rouge">js</code> or <code class="language-plaintext highlighter-rouge">jsx</code> file. <code class="language-plaintext highlighter-rouge">style-loader</code> will run <code class="language-plaintext highlighter-rouge">sass</code>, <code class="language-plaintext highlighter-rouge">scss</code> and <code class="language-plaintext highlighter-rouge">css</code> file.</p>

    <p><code class="language-plaintext highlighter-rouge">file-loader</code> will run png, svg, jpg, gif… (image and video) file.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">exclude</code>: Enter a <strong>regex</strong>, the <code class="language-plaintext highlighter-rouge">loader</code> will ignore these file and folder.</li>
  <li><code class="language-plaintext highlighter-rouge">use</code>: Retrieve an object or an array containing loader information.
    <ul>
      <li>Notice for <code class="language-plaintext highlighter-rouge">babel-loader</code>: using presets <code class="language-plaintext highlighter-rouge">@babel/preset</code> by default. It will compile to ES5 syntax.</li>
      <li>Notice for <code class="language-plaintext highlighter-rouge">style-loader</code>: using <strong>sourMap</strong> to easier debug when dev.</li>
      <li>Notice for <code class="language-plaintext highlighter-rouge">file-loader</code>: using <code class="language-plaintext highlighter-rouge">[path][name].[ext]</code> means after build, the files will be created with the similar names in similar folder. For example: if you have <code class="language-plaintext highlighter-rouge">src/logo.png</code> file, when you build it, you will have <code class="language-plaintext highlighter-rouge">dist/src/logo.png</code>.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">resolve: { extensions: [‘.js’, ‘.jsx’] }</code>: The priority order when import files. For example, there are 2 files name.js and name.jsx in the same folder. In another file you import * from ‘name’, it will prioritize .js file</li>
  <li><code class="language-plaintext highlighter-rouge">output</code>: configuration of build file webpack
    <ul>
      <li><code class="language-plaintext highlighter-rouge">output.path</code>: the absolute path to the directory after build. For the absolute path, we usually use <code class="language-plaintext highlighter-rouge">path.resolve()</code> or <code class="language-plaintext highlighter-rouge">path.join()</code> in combination with the global variable <code class="language-plaintext highlighter-rouge">__dirname</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">output.publicPath</code>: the relative path from the <code class="language-plaintext highlighter-rouge">index.html</code> file pointing to the files in the <strong>dist</strong> directory after build.</li>
    </ul>

    <p>For example: in the file <code class="language-plaintext highlighter-rouge">loadImage.js</code>, we import logo, the logo variable will be become: <code class="language-plaintext highlighter-rouge">output.publicPath + 'src/logo.png</code>. If after the build, we run the <code class="language-plaintext highlighter-rouge">index.html</code> file in a different location not in <strong>the public directory</strong>, we will accidentally make the logo variable wrong.</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">output.filename</code>: filename of js bundle after build</li>
      <li><code class="language-plaintext highlighter-rouge">output.environment</code>: By default, webpack will generate code using the ES6 syntax. If you don’t want this, you can modify the target build by yourself in the <code class="language-plaintext highlighter-rouge">output.environment</code>
        <ul>
          <li><strong>arrowFunction</strong>: support arrow function.</li>
          <li><strong>bigIntLiteral</strong>: support BigInt</li>
          <li><strong>const</strong>: support declaration <code class="language-plaintext highlighter-rouge">const</code> và <code class="language-plaintext highlighter-rouge">let</code></li>
          <li><strong>destructuring</strong>: support destructuring</li>
          <li><strong>dynamicImport</strong>: support async import</li>
          <li><strong>forOf</strong>: support <code class="language-plaintext highlighter-rouge">forOf</code> for array</li>
          <li><strong>module</strong>: support moudle ES6 (import … from ‘…’)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">devtool</code>: contains the configuration file after dev or after build. When you in the dev step, you can use <code class="language-plaintext highlighter-rouge">source-map</code> to debug more simply. But we don’t use it in the production to reduce the volume of file when build.</p>

    <p>Check <a href="https://webpack.js.org/configuration/devtool/">Devtool Webpack</a></p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">devServer</code>: You can imagine, it will create a server <strong>localhost</strong> at the root folder
    <ul>
      <li><strong>devServer.contentBase</strong>: the path directory where contains <code class="language-plaintext highlighter-rouge">index.html</code> file. Here is <code class="language-plaintext highlighter-rouge">public</code></li>
      <li><strong>devServer.port</strong>: port of localhost</li>
      <li><strong>devServer.hot</strong>: The mode <code class="language-plaintext highlighter-rouge">hot reload</code>. By default, on the dev server, webpack will refresh the page every time when there is a slight change in the code. The <code class="language-plaintext highlighter-rouge">hot reload</code> helps use to see the change but don’t need reload page.</li>
      <li><strong>devServer.publicPath</strong>: the relative path from root directory pointing to the build directory. Here is <code class="language-plaintext highlighter-rouge">/dist/</code> –&gt; / is root folder</li>
      <li><strong>devServer.watchContentBase</strong>: If you have the change in the <code class="language-plaintext highlighter-rouge">index.html</code>, browser will reload automatically.</li>
    </ul>
  </li>
</ul>

<h4 id="tree-shaking-in-webpack">Tree Shaking in Webpack</h4>

<p>If you pay attention, in the <code class="language-plaintext highlighter-rouge">src/add.js</code> file, we added a function <code class="language-plaintext highlighter-rouge">treeShaking</code>. This function is exported but we did not use it anywhere in project. So webpack will not use this function and you cant find it in the build file.</p>

<p>This is a called the <a href="https://webpack.js.org/guides/tree-shaking/">tree shaking</a> feature to help us to reduce unused module export.</p>

<p>But this feature only works with code using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">ES Module syntax </a> (<strong>import export …</strong>)</p>

<p>A typical example is the <a href="https://lodash.com/">lodash</a> library. If you <code class="language-plaintext highlighter-rouge">import {get} from 'lodash'</code>, webpack won’t tree shake. It will still import a huge lodash library to your bundle file. There are no different from : <code class="language-plaintext highlighter-rouge">import _ from 'lodash'</code></p>

<p>To fix this problem, we can use the syntax <code class="language-plaintext highlighter-rouge">import get from 'lodash/get</code>. Or simply use the <a href="https://www.npmjs.com/package/lodash-es">lodash es</a> library.</p>

<p>For more detail <a href="https://webpack.js.org/guides/tree-shaking/">Tree Shaking Webpack</a></p>

<hr />
<p>Yeezze! That’s it. Practice yourselves to understand better the configuration of webpack.</p>

<h1 id="reference">Reference</h1>

<p><a href="https://github.com/tienduy-nguyen/webpack/tree/master/webpack-basic">Source code GitHub</a></p>

<p><a href="https://xdevclass.com/webpack-sieu-toc-cau-hinh-dev-server-babel-loader-style-loader-file-loader/">Ref</a></p>]]></content><author><name>TienDuy</name></author><category term="Web Development" /><summary type="html"><![CDATA[Webpack fundamentals for fast learning and step by step to setup a project with webpack.]]></summary></entry><entry><title type="html">Syntax Python vs Javascript</title><link href="/python-vs-javascript" rel="alternate" type="text/html" title="Syntax Python vs Javascript" /><published>2020-09-05T12:00:00+02:00</published><updated>2020-09-05T12:00:00+02:00</updated><id>/python-vs-javascript</id><content type="html" xml:base="/python-vs-javascript"><![CDATA[<p>Programming in a new language can feel unfamiliar, intimidating, and tricky to navigate at first. There are new rules, syntax, and nuances to learn.</p>

<h1 id="python-vs-javascript-language-basics">Python vs. JavaScript Language Basics</h1>
<p>JavaScript and Python are interpreted programming languages, meaning their runtime environments use an interpreter (or engine) that parses and executes code one statement at a time.</p>

<p>The two languages are also “object-based” — everything is (or can be treated as) an object: strings, numbers, data structures, functions, etc.</p>

<h2 id="primitive-types">Primitive Types</h2>
<p>First up, JavaScript and Python have similar built-in data types. For example, both use numeric data types (integers and floats), strings and Booleans.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript data types</span>
<span class="kd">const</span> <span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">31</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">good morning</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">isAdmin</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python data types
</span><span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span>
<span class="n">age</span> <span class="o">=</span> <span class="mi">13</span>
<span class="n">greeting</span> <span class="o">=</span> <span class="s">"good morning"</span>
<span class="n">is_admin</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>

<h2 id="type-checking-and-conversion">Type Checking and Conversion</h2>

<p>Python and JavaScript are “dynamically typed” languages, which means you do not have to set the type of a variable explicitly. The data type is set when you assign a value to a variable.</p>

<p>In JavaScript, you use the typeof operator to verify the data type of a variable. Python provides a similar built-in function, type().</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="kd">const</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">good morning</span><span class="dl">"</span><span class="p">;</span>
<span class="k">typeof</span> <span class="nx">greeting</span><span class="p">;</span> <span class="c1">// "string"</span>
</code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python
</span><span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span>
<span class="nb">type</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span> <span class="c1"># float
</span></code></pre></div></div>

<p>You can convert from one type to another, like a string to a number, in Python with the int() and float() functions:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python
</span><span class="nb">input</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Enter a number: '</span><span class="p">)</span> <span class="c1">#'2'
</span>
<span class="c1"># convert string to int
</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span> <span class="c1"># 2
</span></code></pre></div></div>
<p>JavaScript includes the methods parseInt() and parseFloat() for the same purpose:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="dl">'</span><span class="s1">Enter a number:</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// '4'</span>
<span class="nb">parseInt</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span> <span class="c1">// 4</span>
</code></pre></div></div>

<h2 id="built-in-string-methods">Built-in String Methods</h2>

<p>To convert cased characters in a string from uppercase to lowercase (and the reverse), use Python’s upper() and lower() functions:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python
</span><span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'What is your name? '</span><span class="p">)</span> <span class="c1"># GUIL
</span><span class="n">user_name</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="c1"># 'guil'
</span> 
<span class="n">greeting</span> <span class="o">=</span> <span class="s">"good evening"</span>
<span class="n">greeting</span><span class="p">.</span><span class="n">upper</span><span class="p">()</span> <span class="c1"># 'GOOD EVENING'
</span></code></pre></div></div>

<p>JavaScript supplies the toUpperCase() and toLowerCase() methods to convert strings:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="kd">const</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">good evening</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">userName</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="dl">"</span><span class="s2">What is your name?</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// "gUiL"</span>
 
<span class="nx">greeting</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span> <span class="c1">// "GOOD EVENING"</span>
<span class="nx">userName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span> <span class="c1">// "guil"</span>
</code></pre></div></div>

<p><strong>String Interpolation</strong>
Template literals in JavaScript let you replace ${} placeholders with values inside of a string literal. This process is called string interpolation:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="kd">const</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Good evening</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Guil</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">greeting</span><span class="p">}</span><span class="s2">, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span> <span class="c1">// Good evening, Guil!</span>
</code></pre></div></div>

<p>The Python string format() method inserts values into a template string containing {} replacement fields. You pass the method the values to interpolate. For example:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python strings
</span><span class="n">greeting</span> <span class="o">=</span> <span class="s">"Good evening"</span>
<span class="n">name</span> <span class="o">=</span> <span class="s">"Guil"</span>
<span class="k">print</span><span class="p">(</span> <span class="s">"{}, {}!"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">greeting</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="p">)</span> <span class="c1"># Good evening, Guil!
</span></code></pre></div></div>

<p>Each set of curly braces gets replaced with the values passed to format() in sequential order.</p>

<p>Python’s formatted string literal (f-String) offers a more concise syntax to accomplish the same. It looks like a regular string that’s prepended by the character f, and you include the value to interpolate directly inside the string.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python strings
</span><span class="n">greeting</span> <span class="o">=</span> <span class="s">"Good evening"</span>
<span class="n">name</span> <span class="o">=</span> <span class="s">"Guil"</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">greeting</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">!"</span><span class="p">)</span> <span class="c1"># Good evening, Guil!
</span></code></pre></div></div>

<h1 id="python-vs-javascript-data-structures">Python vs. JavaScript Data Structures</h1>

<p>JavaScript and Python give you comparable structures to store and organize your data.</p>

<h2 id="arrays-and-lists">Arrays and Lists</h2>

<p>Like a JavaScript array, a Python list stores a collection of values in a single container. The values can be different data types like strings, integers, Booleans, etc.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python list
</span><span class="n">students</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Lee'</span><span class="p">,</span> <span class="s">'Toni'</span><span class="p">,</span> <span class="s">'Marie'</span><span class="p">,</span> <span class="s">'Agata'</span><span class="p">]</span>
<span class="c1"># return length of list 
</span><span class="nb">len</span><span class="p">(</span><span class="n">students</span><span class="p">)</span> <span class="c1"># 4
</span><span class="n">students</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># 'Marie'
</span></code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript array</span>
<span class="kd">const</span> <span class="nx">students</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Toni</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Marie</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Agata</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">students</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// 4</span>
<span class="nx">students</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// Lee</span>
</code></pre></div></div>

<p>Notice how both languages have similar ways of returning the length of a list and retrieving a value by index.</p>

<h2 id="array-and-list-methods">Array and List Methods</h2>

<p>Since arrays and lists are considered objects in their respective language, there are various properties and methods you can use on them. For example, a common way to add elements to the end of an array in JavaScript is with the push() method:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="kd">const</span> <span class="nx">instruments</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">piano</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">drums</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">trumpet</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">instruments</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">guitar</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// ['piano', 'drums', 'trumpet', 'guitar']</span>
</code></pre></div></div>

<p>You add an item to the end of a Python list with the append() method:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python
</span><span class="n">instruments</span> <span class="o">=</span> <span class="p">[</span><span class="s">'piano'</span><span class="p">,</span> <span class="s">'drums'</span><span class="p">,</span> <span class="s">'trumpet'</span><span class="p">]</span>
<span class="n">instruments</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'guitar'</span><span class="p">)</span> <span class="c1"># ['piano', 'drums', 'trumpet', 'guitar']
</span></code></pre></div></div>

<p>JavaScript arrays and Python lists have a pop() method for removing and returning items. Calling pop() on a JavaScript array removes the last element:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript arrays</span>
<span class="kd">const</span> <span class="nx">instruments</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">piano</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">drums</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">trumpet</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">instruments</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
<span class="c1">// "trumpet"</span>
</code></pre></div></div>

<p>While JavaScript’s pop() method does not accept arguments, Python’s does! For instance, pass pop() the index of the item you want to remove:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python lists
</span><span class="n">instruments</span> <span class="o">=</span> <span class="p">[</span><span class="s">'piano'</span><span class="p">,</span> <span class="s">'drums'</span><span class="p">,</span> <span class="s">'trumpet'</span><span class="p">]</span>
<span class="n">instruments</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># 'drums'
</span></code></pre></div></div>

<h2 id="spreading-and-unpacking">Spreading and Unpacking</h2>
<p>In JavaScript, you use the spread operator (…) to copy, combine and manipulate arrays:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript arrays</span>
<span class="kd">const</span> <span class="nx">studentsA</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Toni</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Marie</span><span class="dl">'</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">studentsB</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Meg</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Jesse</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Anwar</span><span class="dl">'</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">students</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">studentsA</span><span class="p">,</span> <span class="p">...</span><span class="nx">studentsB</span><span class="p">];</span>
<span class="c1">// ['Lee', 'Toni', 'Marie', 'Meg', 'Jesse', 'Anwar']</span>
</code></pre></div></div>

<p>In a similar way, you can “unpack” items from one Python list into another using an asterisks (*):</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python lists
</span><span class="n">students_a</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Lee'</span><span class="p">,</span> <span class="s">'Toni'</span><span class="p">,</span> <span class="s">'Marie'</span><span class="p">]</span>
<span class="n">students_b</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Meg'</span><span class="p">,</span> <span class="s">'Jesse'</span><span class="p">,</span> <span class="s">'Anwar'</span><span class="p">]</span>
 
<span class="n">students</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">students_a</span><span class="p">,</span> <span class="o">*</span><span class="n">students_b</span><span class="p">]</span>
 <span class="c1"># ['Lee', 'Toni', 'Marie', 'Meg', 'Jesse', 'Anwar']
</span></code></pre></div></div>

<p>Both create a copy of a list or array, preserving the original values.</p>

<p>One handy aspect of the JavaScript spread operator is that you can pass arrays as arguments to functions.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">];</span>
<span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">// 40</span>
</code></pre></div></div>

<p>Likewise, you have the ability to unpack items in a Python list for function calls:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python
</span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="nb">list</span><span class="p">(</span> <span class="nb">range</span><span class="p">(</span><span class="o">*</span><span class="n">numbers</span><span class="p">)</span> <span class="p">)</span> <span class="c1"># [1, 2, 3, 4, 5, 6, 7, 8, 9]
</span></code></pre></div></div>

<p>Both expand an array or list into separate arguments.</p>

<h2 id="objects-and-dictionaries">Objects and Dictionaries</h2>

<p>If you’re familiar with JavaScript objects, you’ll recognize Python dictionaries. You write both using curly brackets holding related data in the form of key/value pairs.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript object</span>
<span class="kd">const</span> <span class="nx">pet</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Joey</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Dog</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">breed</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Australian Shepherd</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">8</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python dictionary
</span><span class="n">pet</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'name'</span><span class="p">:</span> <span class="s">'Joey'</span><span class="p">,</span>
  <span class="s">'type'</span><span class="p">:</span> <span class="s">'Dog'</span><span class="p">,</span>
  <span class="s">'breed'</span><span class="p">:</span> <span class="s">'Australian Shepherd'</span><span class="p">,</span>
  <span class="s">'age'</span><span class="p">:</span> <span class="mi">8</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Lists and dictionaries, like arrays and objects are mutable, which means that you can change the data inside them without changing their identity. Once you create an object, its type and identity (or the address in memory it’s pointing to) does not change.</p>

<p><strong>Copying/Merging Objects and Dictionaries</strong></p>

<p>JavaScript’s spread operator copies key/value pairs from one object literal to another. It’s comparable to the double asterisks (**) operator in Python, which copies and merges dictionaries:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript objects</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Reggie</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Williams</span><span class="dl">'</span>
<span class="p">};</span>
 
<span class="kd">const</span> <span class="nx">developer</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span><span class="nx">name</span><span class="p">,</span> <span class="c1">// place the 'name' key/values here </span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Software developer</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">skills</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">JavaScript</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">HTML</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">CSS</span><span class="dl">'</span><span class="p">]</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python dictionaries
</span><span class="n">name</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'firstName'</span><span class="p">:</span> <span class="s">'Reggie'</span><span class="p">,</span>
  <span class="s">'lastName'</span><span class="p">:</span> <span class="s">'Williams'</span>
<span class="p">}</span>
 
<span class="n">developer</span> <span class="o">=</span> <span class="p">{</span>
  <span class="o">**</span><span class="n">name</span><span class="p">,</span> <span class="c1"># place the 'name' key/values here 
</span>  <span class="s">'title'</span><span class="p">:</span> <span class="s">'Software developer'</span><span class="p">,</span>
  <span class="s">'skills'</span><span class="p">:</span> <span class="p">[</span><span class="s">'JavaScript'</span><span class="p">,</span> <span class="s">'HTML'</span><span class="p">,</span> <span class="s">'CSS'</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="functions">Functions</h2>
<p>Both languages take full advantage of functions for code reuse. Python uses the def keyword compared to function in JavaScript.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python function
</span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">val</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="k">return</span> <span class="n">val</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript function</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Notice how both use the return keyword to return a value, and you’re able to specify default parameters in each function definition.</p>

<h2 id="single-line-functions">Single Line Functions</h2>

<p>Arrow functions in JavaScript offer a concise syntax for creating functions. More so, if your function body is only one line of code, you can omit the return keyword and place everything on one line:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript arrow function</span>
<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</code></pre></div></div>

<p>In Python, the lambda keyword provides syntactic sugar for defining functions as single-line expressions:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python lambda
</span><span class="n">add</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div></div>

<p>These single-line functions are common when you want to pass an anonymous function as an argument to another (higher-order) function. For example, they’re used with the built-in Python and JavaScript functions map(), filter(), and reduce().</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript arrow function</span>
<span class="kd">const</span> <span class="nx">states</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">ca</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fl</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hi</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">ny</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">states</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="p">);</span>
<span class="c1">// ["CA", "FL", "HI", "NY"]</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python lambda
</span><span class="n">states</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ca'</span><span class="p">,</span> <span class="s">'fl'</span><span class="p">,</span> <span class="s">'hi'</span><span class="p">,</span> <span class="s">'ny'</span><span class="p">]</span>
<span class="nb">list</span><span class="p">(</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">upper</span><span class="p">(),</span> <span class="n">states</span><span class="p">)</span> <span class="p">)</span>
 <span class="c1"># ['CA', 'FL', 'HI', 'NY']
</span></code></pre></div></div>

<h2 id="conditional-statements">Conditional Statements</h2>

<p>Python’s flow control statements also look and work similarly to the if/else you know from JavaScript:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript conditional</span>
<span class="kd">let</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
 
<span class="k">if</span> <span class="p">(</span> <span class="nx">score</span> <span class="o">===</span> <span class="mi">5</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Gold Medal!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Silver Medal</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Bronze Medal</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">No Medal :(</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The most significant difference besides the absence of curly braces and parentheses around the condition is the elif clause, which is short for “else if”.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python conditional
</span><span class="n">score</span> <span class="o">=</span> <span class="mi">5</span>
 
<span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Gold Medal!"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Silver Medal"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Bronze Medal"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"No Medal :("</span><span class="p">)</span>
</code></pre></div></div>

<p>Like JavaScript’s else if clause, you can specify any number of elif clauses, and the optional else clause should appear last.</p>

<h2 id="loops-and-iteration">Loops and Iteration</h2>
<p>Lastly, Python has a while loop, which looks and works almost the same as its JavaScript counterpart:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Python
password = input("Enter the secret password: ")
while password != 'sesame':
    password = input("Invalid password. Try again: ")
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// JavaScript
let password = prompt("Enter the secret password:");
while (password !== 'sesame') {
  password = prompt("Invalid password. Try again: ");
}
</code></pre></div></div>

<p>Data types like strings, lists, and dictionaries are also iterable objects in Python; you use a for loop to iterate over them:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="nx">Python</span> <span class="k">for</span> <span class="nx">loop</span>
<span class="nx">students</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Toni</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Marie</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Jesse</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Anwar</span><span class="dl">'</span><span class="p">]</span>
<span class="k">for</span> <span class="nx">student</span> <span class="k">in</span> <span class="nx">students</span><span class="p">:</span>
    <span class="nx">print</span><span class="p">(</span><span class="nx">student</span><span class="p">)</span>
</code></pre></div></div>

<p>The above loop seems more elegant as opposed to JavaScript’s verbose for loop. It’s comparable to the for…of loop introduced in ES2015.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript for...of loop</span>
<span class="kd">const</span> <span class="nx">students</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Toni</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Marie</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Jesse</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Anwar</span><span class="dl">'</span><span class="p">]</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">student</span> <span class="k">of</span> <span class="nx">students</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">student</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You also use the break keyword in either to exit (or break out of) a while and for loop.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python
</span><span class="n">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">35</span><span class="p">]</span>
<span class="k">for</span> <span class="n">score</span> <span class="ow">in</span> <span class="n">scores</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Score: </span><span class="si">{</span><span class="n">score</span><span class="si">}</span><span class="s">"</span><span class="p">);</span>
    <span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"You may not continue if you have a 0 score."</span><span class="p">)</span>
        <span class="k">break</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript</span>
<span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
<span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="dl">"</span><span class="s2">Type 'exit' to make this stop.</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">exit</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />
<p>Happy learning!</p>]]></content><author><name>TienDuy</name></author><category term="programming" /><summary type="html"><![CDATA[Programming in a new language can feel unfamiliar, intimidating, and tricky to navigate at first. There are new rules, syntax, and nuances to learn.]]></summary></entry><entry><title type="html">Better In Ruby - 02</title><link href="/better-in-ruby-02" rel="alternate" type="text/html" title="Better In Ruby - 02" /><published>2020-08-30T12:00:00+02:00</published><updated>2020-08-30T12:00:00+02:00</updated><id>/better-in-ruby-02</id><content type="html" xml:base="/better-in-ruby-02"><![CDATA[<p>Some tips you probably don’t know in Ruby - 02</p>

<p>In this article, I want to show you some nice Ruby features that you may know or not. Anyway, it’s a quick read and it’s always interesting to learn new stuff, right?!</p>

<h2 id="create-a-hash-from-a-list-of-values">Create a hash from a list of values</h2>
<p><a style="padding:0px, margin:0px" name="assigning-rest-array"></a></p>

<p>You can create a hash from a list of values by using Hash[…]. It will create a hash like below:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Hash</span><span class="p">[</span><span class="s1">'key1'</span><span class="p">,</span> <span class="s1">'value1'</span><span class="p">,</span> <span class="s1">'key2'</span><span class="p">,</span> <span class="s1">'value2'</span><span class="p">]</span>

<span class="c1"># =&gt; {"key1"=&gt;"value1", "key2"=&gt;"value2"}</span>
</code></pre></div></div>

<h2 id="lambda-literal--">Lambda Literal -&gt;</h2>
<p><a style="padding:0px, margin:0px" name="word-array"></a></p>

<p>Lambda Literal is a anonymous function like lambda in python, <code class="language-plaintext highlighter-rouge">=&gt;</code> in JS or C#, allows you to create lambda easily.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
<span class="n">a</span><span class="p">.</span><span class="nf">call</span>
<span class="c1"># =&gt; 2</span>

<span class="n">a</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">{</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
<span class="n">a</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="c1"># =&gt; 3</span>
</code></pre></div></div>

<h2 id="double-star-">Double star (**)</h2>
<p><a style="padding:0px, margin:0px" name="concate-array"></a></p>

<p>The double star is a neat little trick in Ruby. See the following method:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="o">**</span><span class="n">c</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">a</code> is a regular parameter. <code class="language-plaintext highlighter-rouge">*b</code> will take all the parameters passed after the first one and put them in an array. <code class="language-plaintext highlighter-rouge">**c</code> will take any parameter given in the format key: value at the end of the method call.</p>

<p>See the following examples:</p>

<p>One parameter</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># =&gt; [1, [], {}]</span>
</code></pre></div></div>

<p>More than one parameter</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="c1"># =&gt; [1, [2, 3, 4], {}]</span>
</code></pre></div></div>
<p>More than one parameter + hash-style parameters</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">a: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">b: </span><span class="mi">2</span><span class="p">)</span>
<span class="c1"># =&gt; [1, [2, 3, 4], {:a=&gt;1, :b=&gt;2}]</span>
</code></pre></div></div>
<h2 id="handle-single-object-and-array-in-the-same-way">Handle single object and array in the same way</h2>
<p><a style="padding:0px, margin:0px" name="format-decimal"></a></p>

<p>Sometimes you might want to give the option to either accept a single object or an array of objects. Instead of checking for the type of object you’ve received, you could use <code class="language-plaintext highlighter-rouge">[*something] or Array(something)</code>.</p>

<p>Let’s assign two variables. The first one is a single digit and the second one is an array of digits.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stuff</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">stuff_arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>
<p>In the following example, I use <code class="language-plaintext highlighter-rouge">[*...]</code> to loop through whatever is give</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="o">*</span><span class="n">stuff</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span> <span class="p">}</span>
<span class="p">[</span><span class="o">*</span><span class="n">stuff_arr</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span> <span class="p">}</span>
</code></pre></div></div>
<p>Same in this one but using Array(…).</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Array</span><span class="p">(</span><span class="n">stuff</span><span class="p">).</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span> <span class="p">}</span>
<span class="no">Array</span><span class="p">(</span><span class="n">stuff_arr</span><span class="p">).</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span> <span class="p">}</span>
</code></pre></div></div>

<h2 id="double-pipe-equals-">Double Pipe Equals ||=</h2>
<p><a style="padding:0px, margin:0px" name="remove-folder"></a></p>

<p>The Double Pipe Equals is a great tool to write concise code.</p>

<p>It’s actually equivalent to the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">||</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="c1"># Correct</span>
</code></pre></div></div>

<p>And not this one, as a lot of people think:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">||</span> <span class="n">b</span> <span class="c1"># Wrong</span>
</code></pre></div></div>

<p>The second one doesn’t make sense because there is no point reassigning a if we already have it!</p>

<p>This operator can be used to create methods like this in your classes. I love to use it for calculations.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">total</span>
  <span class="vi">@total</span> <span class="o">||=</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">100000000</span><span class="p">).</span><span class="nf">to_a</span><span class="p">.</span><span class="nf">inject</span><span class="p">(:</span><span class="o">+</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now you could have other method calling total to get the total value but it will only be calculated the first time.</p>

<h2 id="mandatory-hash-parameters">Mandatory hash parameters</h2>
<p><a style="padding:0px, margin:0px" name="massive-assignment"></a></p>

<p>This one was introduced in Ruby 2.0. Instead of just defining a method that takes a hash in parameters like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span><span class="p">({})</span>
<span class="k">end</span>
</code></pre></div></div>
<p>You can specify the keys that you are waiting for and even define default values for them! a and b are mandatory keys.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">a</span><span class="p">:,</span> <span class="n">b</span><span class="p">:,</span> <span class="ss">c: </span><span class="s1">'default'</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
<span class="k">end</span>
</code></pre></div></div>
<p>We can try to call it without giving a value for b but it won’t work.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span><span class="p">(</span><span class="ss">a: </span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># =&gt; ArgumentError: missing keyword: b</span>
</code></pre></div></div>

<p>Since c has a default value, we can just call the method with a and b.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span><span class="p">(</span><span class="ss">a: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">b: </span><span class="mi">2</span><span class="p">)</span>
<span class="c1"># =&gt; [1, 2, "default"]</span>
</code></pre></div></div>

<p>Or with all of them.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_method</span><span class="p">(</span><span class="ss">a: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">b: </span><span class="mi">2</span><span class="p">,</span> <span class="ss">c: </span><span class="mi">3</span><span class="p">)</span>
<span class="c1"># =&gt; [1, 2, 3]</span>
</code></pre></div></div>

<p>All we are doing is passing a hash and using some visual shortcuts but obviously, you can also pass a hash like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">a: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">b: </span><span class="mi">2</span><span class="p">,</span> <span class="ss">c: </span><span class="mi">3</span> <span class="p">}</span>
<span class="n">my_method</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
<span class="c1"># =&gt; [1, 2, 3]</span>
</code></pre></div></div>

<h2 id="generate-array-of-alphabet-or-numbers">Generate array of alphabet or numbers</h2>
<p><a style="padding:0px, margin:0px" name="deep-copy"></a></p>

<p>You might want to generate a list of numbers or put the entire alphabet inside an array. Well, you can use ruby ranges to do this.</p>

<p>A to Z</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="s1">'a'</span><span class="o">..</span><span class="s1">'z'</span><span class="p">).</span><span class="nf">to_a</span>
<span class="c1"># =&gt; ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]</span>
</code></pre></div></div>

<p>1 to 10</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">).</span><span class="nf">to_a</span>
<span class="c1"># =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
</code></pre></div></div>

<h2 id="tap">Tap</h2>
<p><a style="padding:0px, margin:0px" name="random-array"></a></p>

<p>Tap is a nice little method that improves code readability. Let’s take the following class as an example.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span>
  <span class="nb">attr_accessor</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:c</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Now let’s say you want to instantiate a new user and assign a value to each of its attributes. You could do it like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span>
  <span class="n">o</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">o</span><span class="p">.</span><span class="nf">a</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">o</span><span class="p">.</span><span class="nf">b</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="n">o</span><span class="p">.</span><span class="nf">c</span> <span class="o">=</span> <span class="mi">3</span>
  <span class="n">o</span>
<span class="k">end</span>

</code></pre></div></div>
<p>Or you could use tap to do it like this.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span>
  <span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span>
    <span class="n">o</span><span class="p">.</span><span class="nf">a</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">o</span><span class="p">.</span><span class="nf">b</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">o</span><span class="p">.</span><span class="nf">c</span> <span class="o">=</span> <span class="mi">3</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p>Basically, the tap method yields the calling object to the block and returns it.</p>

<hr />
<p>Thanks you for reading! Stay tunned to update the next chapter.</p>

<h1 id="reference">Reference</h1>

<p><a href="https://devblast.com/b/ruby-tricks-improve-code">Source</a></p>]]></content><author><name>TienDuy</name></author><category term="ruby" /><summary type="html"><![CDATA[Some tips you probably don’t know in Ruby - 02]]></summary></entry><entry><title type="html">Better In Ruby - 01</title><link href="/better-in-ruby-01" rel="alternate" type="text/html" title="Better In Ruby - 01" /><published>2020-08-01T12:00:00+02:00</published><updated>2020-08-01T12:00:00+02:00</updated><id>/better-in-ruby-01</id><content type="html" xml:base="/better-in-ruby-01"><![CDATA[<p>Some tips you probably don’t know in Ruby.</p>

<p>Today, I will make a series that I learned about tips and tricks in ruby.</p>

<h2 id="assigning-the-rest-of-an-array-to-a-variable">Assigning the rest of an array to a variable</h2>
<p><a style="padding:0px, margin:0px" name="assigning-rest-array"></a></p>

<p>When destructuring an array, you can unpack and assign the remaining part of it to a variable using the rest pattern</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span>

  <span class="n">b</span>    <span class="c1"># =&gt; 1</span>
  <span class="n">rest</span> <span class="c1"># =&gt; [2, 3]</span>
  <span class="n">a</span>    <span class="c1"># =&gt; [1, 2, 3]</span>
</code></pre></div></div>

<h2 id="word-array">Word array</h2>
<p><a style="padding:0px, margin:0px" name="word-array"></a></p>

<p>When we want to add a separator in the string</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sx">%w{This is a string, I want to separate by a comma}</span> <span class="o">*</span> <span class="s2">", "</span>
<span class="c1"># "This, is, a, string,, I, want, to, separate, by, a, comma"</span>
</code></pre></div></div>

<h2 id="concate-array">Concate array</h2>
<p><a style="padding:0px, margin:0px" name="concate-array"></a></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="c1"># true</span>
<span class="n">new_array</span> <span class="o">=</span> <span class="no">Array</span><span class="p">.</span><span class="nf">new</span><span class="p">([</span><span class="mi">0</span><span class="p">],</span> <span class="mi">5</span><span class="p">)</span> <span class="c1"># [0,0,0,0,0]</span>
</code></pre></div></div>

<h2 id="format-decimal">Format decimal</h2>
<p><a style="padding:0px, margin:0px" name="format-decimal"></a></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">number</span> <span class="o">=</span> <span class="mf">9.5</span>
<span class="s2">"%.2f"</span> <span class="o">%</span> <span class="n">number</span> <span class="c1"># =&gt; "9.50"</span>
<span class="n">number</span><span class="p">.</span><span class="nf">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="remove-a-folder">Remove a folder</h2>
<p><a style="padding:0px, margin:0px" name="remove-folder"></a></p>

<p>This is a relatively common job of developer. There a many different ways to delete a folder and this is one of the shortest and fastest way to do:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'fileutils'</span>
<span class="no">FileUtils</span><span class="p">.</span><span class="nf">rm_r</span> <span class="s1">'somedir'</span>
</code></pre></div></div>

<h2 id="massive-assignment">Massive assignment</h2>
<p><a style="padding:0px, margin:0px" name="massive-assignment"></a></p>

<p>Massive assignment allow us to declare many variables at the same time</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span>
</code></pre></div></div>

<p>This feature will be very useful in the method with many parameters</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span> <span class="o">=</span> <span class="n">args</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="deep-copy">Deep copy</h2>
<p><a style="padding:0px, margin:0px" name="deep-copy"></a></p>

<p>When we copy an object that contains others objects inside, array for example, you only copy references to those objects</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">food</span> <span class="o">=</span> <span class="sx">%w( bread milk orange )</span>
<span class="n">food</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:object_id</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">69612840</span><span class="p">,</span> <span class="mi">69612820</span><span class="p">,</span> <span class="mi">69612800</span><span class="p">]</span>
<span class="p">[</span><span class="mi">122</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">food</span><span class="p">.</span><span class="nf">clone</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:object_id</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">69612840</span><span class="p">,</span> <span class="mi">69612820</span><span class="p">,</span> <span class="mi">69612800</span><span class="p">]</span>
</code></pre></div></div>

<p>Using <code>Marshal</code> (usually use for <a href="https://en.wikipedia.org/wiki/Serialization">serialization</a>), you can create a deep copy.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">deep_copy</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
  <span class="no">Marshal</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="no">Marshal</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
<span class="k">end</span>
</code></pre></div></div>

<p>See the result:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ObjectSpace</span><span class="p">.</span><span class="nf">each_object</span><span class="p">(</span><span class="no">String</span><span class="p">).</span><span class="nf">select</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">food</span><span class="p">.</span><span class="nf">first</span><span class="p">}.</span><span class="nf">count</span>
<span class="o">=&gt;</span> <span class="mi">54</span>
<span class="n">deep_copy</span><span class="p">(</span><span class="n">food</span><span class="p">).</span><span class="nf">map</span> <span class="o">&amp;</span><span class="ss">:object_id</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">77564660</span><span class="p">,</span> <span class="mi">77564420</span><span class="p">,</span> <span class="mi">77564300</span><span class="p">]</span>
<span class="no">ObjectSpace</span><span class="p">.</span><span class="nf">each_object</span><span class="p">(</span><span class="no">String</span><span class="p">).</span><span class="nf">select</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">food</span><span class="p">.</span><span class="nf">first</span><span class="p">}.</span><span class="nf">count</span>
<span class="o">=&gt;</span> <span class="mi">56</span>

</code></pre></div></div>

<p><strong>Bonus</strong>: Difference between <code>clone</code> and <code>dup</code>(They are almost the same, but there are two points that <strong>dup</strong> doesn’t have)</p>

<ul>
  <li>Clone also singleton class of copied object</li>
  <li>Keep the frozen state of copied object</li>
</ul>

<p>For example:</p>

<ul>
  <li>Singleton methods
    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="no">Object</span><span class="p">.</span><span class="nf">new</span>
<span class="k">def</span> <span class="nc">a</span><span class="o">.</span><span class="nf">foo</span><span class="p">;</span> <span class="ss">:foo</span> <span class="k">end</span>
<span class="nb">p</span> <span class="n">a</span><span class="p">.</span><span class="nf">foo</span>
<span class="o">=&gt;</span> <span class="ss">:foo</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="nf">dup</span>
<span class="nb">p</span> <span class="n">b</span><span class="p">.</span><span class="nf">foo</span>
<span class="o">=&gt;</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`foo' for #&lt;Object:0x007f8bc395ff00&gt; (NoMethodError)
c = a.clone
c.foo
=&gt; :foo
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>Frozen state</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="no">Object</span><span class="p">.</span><span class="nf">new</span>
<span class="n">a</span><span class="p">.</span><span class="nf">freeze</span>
<span class="nb">p</span> <span class="n">a</span><span class="p">.</span><span class="nf">frozen?</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="nf">dup</span>
<span class="nb">p</span> <span class="n">b</span><span class="p">.</span><span class="nf">frozen?</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="nf">clone</span>
<span class="nb">p</span> <span class="n">c</span><span class="p">.</span><span class="nf">frozen?</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="create-a-an-array-with-random-values">Create a an array with random values</h2>
<p><a style="padding:0px, margin:0px" name="random-array"></a></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Array</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="nb">rand</span> <span class="mi">300</span> <span class="p">}</span>
</code></pre></div></div>

<p>It will create an array with 10 item that have the random values from 0 to 299</p>

<hr />
<p>Thanks you for reading! Stay tunned to update the next chapter.</p>

<h1 id="reference">Reference</h1>

<p><a href="https://www.codehub.vn/">codehub.vn</a></p>

<p><a href="https://viblo.asia/followings">viblo.asia</a></p>]]></content><author><name>TienDuy</name></author><category term="ruby" /><summary type="html"><![CDATA[Some tips you probably don’t know in Ruby.]]></summary></entry><entry><title type="html">Rails 5 or Rails 6 ?</title><link href="/rails-5-or-rails-6" rel="alternate" type="text/html" title="Rails 5 or Rails 6 ?" /><published>2020-07-29T10:00:00+02:00</published><updated>2020-07-29T10:00:00+02:00</updated><id>/rails-5-or-rails-6</id><content type="html" xml:base="/rails-5-or-rails-6"><![CDATA[<p>What version of rails you use in your projects, today?</p>

<p>At <a href="https://www.thehackingproject.org/">THP</a>, when we start learning rails, we are required to install rails version 5.2.3. But I when I see that the new version of rails has been released is already 6.0. So we have posed a question for our technical manager of <a href="https://www.thehackingproject.org/">THP</a>:</p>

<p>Why we don’t install directly the version rails 6.0?</p>

<p>And he said: “One word: <code class="language-plaintext highlighter-rouge">webpack</code>. I always don’t understand so much for the “webpack”, and I need to search more on the internet. And with this article (this is not mine), we will know some advantages and new features of rails 6 .</p>

<p>I hear that: Rails 5 is still just fine
Rails 5.0.Z is still on the severe patches list, and Rails 5.2.Z is still receiving regular security updates; so you’re still OK on Rails 5 (especially 5.2 or higher)</p>

<p>Now We will see 4 amazing features of rails 6.</p>

<h2 id="parralled-testing">Parralled Testing</h2>

<p>Test’s performance is finally going to be improved (a lot!). Now you can use cores to your advantage of running big tests much faster. Each testing worker runs in its own thread - it should be reflected in the CPU monitor. Thanks to Eileen Uchitelle and Aaron Patterson, parallel-testing will land in the upcoming, final version of Rails framework.</p>

<p>As you probably already know, the way of implementing tests is very important. We try to implement as many suitable tests as we can. It’s great news for us as more tests will no longer have that much of an impact on the execution time. (Stay tuned for our guide on how to write great tests in Rails!)</p>

<p>“The default number [of workers running in parallel] is the actual core count on the machine you are on, but can be changed by the number passed to the parallelize method.” To enable executing tests parallel just set the number of workers in <code class="language-plaintext highlighter-rouge">rails_helper.rb</code>.</p>

<h2 id="native-webpacker-support">Native Webpacker Support</h2>

<p>Webpacker was introduced a while back with the 5.1 version of Ruby on Rails. It makes using JavaScript pre-processor easier.</p>

<p>We usually use it for JavaScript code, it works really well but it can also be used for CSS, images, fonts and assets as well. From now on, Sprockets is being replaced and Webpacker is the default JavaScript bundler for Rails through the new app/javascript directory.</p>

<p>Currently, in modern applications, using traditional rails views is not so often anymore. User Interfaces are very interactive, there is a lot of dynamic elements which have to respond really fast. Now, the application setup with Rails on the backend and React/Vue on the frontend will be an easy-peasy pleasure :)</p>

<h2 id="multi-database-support">Multi Database Support</h2>

<p>Another great feature of upcoming Rails 6.0 is the support for multiple simultaneous database connections. It’s a new, simple API for making that happen without the need to reach deeply into Active Record.</p>

<p>Official RoR blog suggests using two databases to for example split the workflow between two replica databases for a performance boost or records segmentation into databases for scaling. We can definitely see multiple database support as an improvement in building microservices architecture.</p>

<p>One of the real life examples where this feature could be really useful is our in-house project - Artinfo. In this project, there are two database connections, one for old users and one for those who just signed up. Now with Rails 6, this implementation would be much easier.</p>

<h2 id="zeitwerk">Zeitwerk</h2>

<p>With this version of Rails a new code loader was introduced - Zeitwerk. It promises to load your project’s classes and modules on demand, no need to write <code class="language-plaintext highlighter-rouge">require</code> calls. Zeitwerk uses absolute file names making the loader more efficient. Your classes and modules are available everywhere. The team behind the loader claims that it is thread-safe and matches Ruby’s semantics for constants.</p>

<p>Still curious for more? You can find more new stuff over at <a href="https://weblog.rubyonrails.org/2019/8/15/Rails-6-0-final-release/">rubyonrails.org</a>.</p>

<h3 id="so-to-reponse-the-question-of-article">So to reponse the question of article?</h3>

<p>I don’t know yet. All the new features of rails 6 is still so much compliated for me. At this moment, I will use the rails 5 for the project training and I will discover more about how to use the features of rails 6 and apply it in the new projects.</p>

<p><strong>But other developer said:</strong></p>

<p>If you are starting a new Rails project today - I would definitely start with Rails 6. It’s officially supported now - and if you look at some of the CHANGELOGS above, you’ll see that many of the subsystems have been stable for many months.</p>

<p>If you have a project on Rails 5.2 or higher - then you have some time before you have to do anything. If you’re not interested in any of the major announced updates then you’ll still be getting security updates for awhile.</p>

<p>You could still try running rails app:update though, just to see how much has changed for you particular app - which will give you an idea of how much work it will be when you do decide to upgrade.</p>

<p>If you have a project on Rails 5.0 or lower - then I would definitely consider upgrading sooner rather than later. It will take more work to upgrade these older projects (especially Rails 4 and below) - but security updates are already stopped for Rails &lt; 4.2 - so now (right after a major release) is a good time to update (so that you don’t have to do it again for awhile).</p>

<h2 id="reference">Reference</h2>

<p>Check out on <a href="https://dev.to/chrisachard/rails-6-released-what-does-that-mean-for-you-3591">dev.to</a> and <a href="https://naturaily.com/blog/4-features-ruby-on-rails-6">naturaily.com</a></p>]]></content><author><name>TienDuy</name></author><category term="ruby" /><summary type="html"><![CDATA[What version of rails you use in your projects, today?]]></summary></entry></feed>